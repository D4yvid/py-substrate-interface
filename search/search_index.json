{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This library specializes in interfacing with a Substrate node; querying storage, composing extrinsics, SCALE encoding/decoding and providing additional convenience methods to deal with the features and metadata of the Substrate runtime. Getting started \u00b6 About installation, initialization and useful background information. Usage \u00b6 Overview of available functionality and how to use it. Function Reference \u00b6 Extensive reference of functions and classes in the library. Examples \u00b6 Various code snippets for common use-cases. Metadata docs \u00b6 Documentation of Substrate metadata for well known runtimes and how to use it with py-substrate-interface. Contact and Support \u00b6 For questions, please see the Substrate StackExchange , Github Discussions or reach out to us on our matrix chat group: Polkascan Technical . License \u00b6 https://github.com/polkascan/py-substrate-interface/blob/master/LICENSE","title":"Overview"},{"location":"#getting-started","text":"About installation, initialization and useful background information.","title":"Getting started"},{"location":"#usage","text":"Overview of available functionality and how to use it.","title":"Usage"},{"location":"#function-reference","text":"Extensive reference of functions and classes in the library.","title":"Function Reference"},{"location":"#examples","text":"Various code snippets for common use-cases.","title":"Examples"},{"location":"#metadata-docs","text":"Documentation of Substrate metadata for well known runtimes and how to use it with py-substrate-interface.","title":"Metadata docs"},{"location":"#contact-and-support","text":"For questions, please see the Substrate StackExchange , Github Discussions or reach out to us on our matrix chat group: Polkascan Technical .","title":"Contact and Support"},{"location":"#license","text":"https://github.com/polkascan/py-substrate-interface/blob/master/LICENSE","title":"License"},{"location":"examples/","text":"Batch call \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 from substrateinterface import SubstrateInterface , Keypair from substrateinterface.exceptions import SubstrateRequestException substrate = SubstrateInterface ( url = \"ws://127.0.0.1:9944\" ) keypair = Keypair . create_from_uri ( '//Alice' ) balance_call = substrate . compose_call ( call_module = 'Balances' , call_function = 'transfer' , call_params = { 'dest' : '5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty' , 'value' : 1 * 10 ** 15 } ) call = substrate . compose_call ( call_module = 'Utility' , call_function = 'batch' , call_params = { 'calls' : [ balance_call , balance_call ] } ) extrinsic = substrate . create_signed_extrinsic ( call = call , keypair = keypair , era = { 'period' : 64 } ) try : receipt = substrate . submit_extrinsic ( extrinsic , wait_for_inclusion = True ) print ( 'Extrinsic \" {} \" included in block \" {} \"' . format ( receipt . extrinsic_hash , receipt . block_hash )) if receipt . is_success : print ( '\u2705 Success, triggered events:' ) for event in receipt . triggered_events : print ( f '* { event . value } ' ) else : print ( '\u26a0\ufe0f Extrinsic Failed: ' , receipt . error_message ) except SubstrateRequestException as e : print ( \"Failed to send: {} \" . format ( e )) Fee info \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 from substrateinterface import SubstrateInterface , Keypair # import logging # logging.basicConfig(level=logging.DEBUG) substrate = SubstrateInterface ( url = \"ws://127.0.0.1:9944\" ) keypair = Keypair . create_from_uri ( '//Alice' ) call = substrate . compose_call ( call_module = 'Balances' , call_function = 'transfer' , call_params = { 'dest' : '5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty' , 'value' : 1 * 10 ** 15 } ) # Get payment info payment_info = substrate . get_payment_info ( call = call , keypair = keypair ) print ( \"Payment info: \" , payment_info ) Query a Mapped storage function \u00b6 1 2 3 4 5 6 7 8 9 10 from substrateinterface import SubstrateInterface substrate = SubstrateInterface ( url = \"ws://127.0.0.1:9944\" ) result = substrate . query_map ( \"System\" , \"Account\" , max_results = 100 ) for account , account_info in result : print ( f '* { account . value } : { account_info . value } ' ) Multisig transaction \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 from substrateinterface import SubstrateInterface , Keypair substrate = SubstrateInterface ( url = \"ws://127.0.0.1:9944\" ) keypair_alice = Keypair . create_from_uri ( '//Alice' , ss58_format = substrate . ss58_format ) keypair_bob = Keypair . create_from_uri ( '//Bob' , ss58_format = substrate . ss58_format ) keypair_charlie = Keypair . create_from_uri ( '//Charlie' , ss58_format = substrate . ss58_format ) # Generate multi-sig account from signatories and threshold multisig_account = substrate . generate_multisig_account ( signatories = [ keypair_alice . ss58_address , keypair_bob . ss58_address , keypair_charlie . ss58_address ], threshold = 2 ) call = substrate . compose_call ( call_module = 'Balances' , call_function = 'transfer' , call_params = { 'dest' : keypair_alice . ss58_address , 'value' : 3 * 10 ** 3 } ) # Initiate multisig tx extrinsic = substrate . create_multisig_extrinsic ( call , keypair_alice , multisig_account , era = { 'period' : 64 }) receipt = substrate . submit_extrinsic ( extrinsic , wait_for_inclusion = True ) if not receipt . is_success : print ( f \"\u26a0\ufe0f { receipt . error_message } \" ) exit () # Finalize multisig tx with other signatory extrinsic = substrate . create_multisig_extrinsic ( call , keypair_bob , multisig_account , era = { 'period' : 64 }) receipt = substrate . submit_extrinsic ( extrinsic , wait_for_inclusion = True ) if receipt . is_success : print ( f \"\u2705 { receipt . triggered_events } \" ) else : print ( f \"\u26a0\ufe0f { receipt . error_message } \" ) Create and call ink! contract \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 import os from substrateinterface.contracts import ContractCode , ContractInstance from substrateinterface import SubstrateInterface , Keypair substrate = SubstrateInterface ( url = \"ws://127.0.0.1:9944\" , type_registry_preset = 'canvas' ) keypair = Keypair . create_from_uri ( '//Alice' ) contract_address = \"5GhwarrVMH8kjb8XyW6zCfURHbHy3v84afzLbADyYYX6H2Kk\" # Check if contract is on chain contract_info = substrate . query ( \"Contracts\" , \"ContractInfoOf\" , [ contract_address ]) if contract_info . value : print ( f 'Found contract on chain: { contract_info . value } ' ) # Create contract instance from deterministic address contract = ContractInstance . create_from_address ( contract_address = contract_address , metadata_file = os . path . join ( os . path . dirname ( __file__ ), 'assets' , 'flipper.json' ), substrate = substrate ) else : # Upload WASM code code = ContractCode . create_from_contract_files ( metadata_file = os . path . join ( os . path . dirname ( __file__ ), 'assets' , 'flipper.json' ), wasm_file = os . path . join ( os . path . dirname ( __file__ ), 'assets' , 'flipper.wasm' ), substrate = substrate ) # Deploy contract print ( 'Deploy contract...' ) contract = code . deploy ( keypair = keypair , endowment = 0 , gas_limit = 1000000000000 , constructor = \"new\" , args = { 'init_value' : True }, upload_code = True ) print ( f '\u2705 Deployed @ { contract . contract_address } ' ) # Read current value result = contract . read ( keypair , 'get' ) print ( 'Current value of \"get\":' , result . contract_result_data ) # Do a gas estimation of the message gas_predit_result = contract . read ( keypair , 'flip' ) print ( 'Result of dry-run: ' , gas_predit_result . value ) print ( 'Gas estimate: ' , gas_predit_result . gas_required ) # Do the actual call print ( 'Executing contract call...' ) contract_receipt = contract . exec ( keypair , 'flip' , args = { }, gas_limit = gas_predit_result . gas_required ) if contract_receipt . is_success : print ( f 'Events triggered in contract: { contract_receipt . contract_events } ' ) else : print ( f 'Error message: { contract_receipt . error_message } ' ) result = contract . read ( keypair , 'get' ) print ( 'Current value of \"get\":' , result . contract_result_data ) Historic balance \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 from substrateinterface import SubstrateInterface substrate = SubstrateInterface ( url = \"ws://127.0.0.1:9944\" ) block_number = 10 block_hash = substrate . get_block_hash ( block_number ) result = substrate . query ( \"System\" , \"Account\" , [ \"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\" ], block_hash = block_hash ) def format_balance ( amount : int ): amount = format ( amount / 10 ** substrate . properties . get ( 'tokenDecimals' , 0 ), \".15g\" ) return f \" { amount } { substrate . properties . get ( 'tokenSymbol' , 'UNIT' ) } \" balance = ( result . value [ \"data\" ][ \"free\" ] + result . value [ \"data\" ][ \"reserved\" ]) print ( f \"Balance @ { block_number } : { format_balance ( balance ) } \" ) Block headers subscription \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 from substrateinterface import SubstrateInterface substrate = SubstrateInterface ( url = \"ws://127.0.0.1:9944\" ) def subscription_handler ( obj , update_nr , subscription_id ): print ( f \"New block # { obj [ 'header' ][ 'number' ] } \" ) block = substrate . get_block ( block_number = obj [ 'header' ][ 'number' ]) for idx , extrinsic in enumerate ( block [ 'extrinsics' ]): print ( f '# { idx } : { extrinsic . value } ' ) if update_nr > 2 : return { 'message' : 'Subscription will cancel when a value is returned' , 'updates_processed' : update_nr } result = substrate . subscribe_block_headers ( subscription_handler ) print ( result ) Storage subscription \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 from substrateinterface import SubstrateInterface substrate = SubstrateInterface ( url = \"ws://127.0.0.1:9944\" ) def subscription_handler ( account_info_obj , update_nr , subscription_id ): if update_nr == 0 : print ( 'Initial account data:' , account_info_obj . value ) if update_nr > 0 : # Do something with the update print ( 'Account data changed:' , account_info_obj . value ) # The execution will block until an arbitrary value is returned, which will be the result of the `query` if update_nr > 5 : return account_info_obj result = substrate . query ( \"System\" , \"Account\" , [ \"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\" ], subscription_handler = subscription_handler ) print ( result ) Subscribe to multiple storage keys \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from substrateinterface import SubstrateInterface def subscription_handler ( storage_key , updated_obj , update_nr , subscription_id ): print ( f \"Update for { storage_key . params [ 0 ] } : { updated_obj . value } \" ) substrate = SubstrateInterface ( url = \"ws://127.0.0.1:9944\" ) # Accounts to track storage_keys = [ substrate . create_storage_key ( \"System\" , \"Account\" , [ \"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\" ] ), substrate . create_storage_key ( \"System\" , \"Account\" , [ \"5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty\" ] ) ] result = substrate . subscribe_storage ( storage_keys = storage_keys , subscription_handler = subscription_handler )","title":"Examples"},{"location":"examples/#batch-call","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 from substrateinterface import SubstrateInterface , Keypair from substrateinterface.exceptions import SubstrateRequestException substrate = SubstrateInterface ( url = \"ws://127.0.0.1:9944\" ) keypair = Keypair . create_from_uri ( '//Alice' ) balance_call = substrate . compose_call ( call_module = 'Balances' , call_function = 'transfer' , call_params = { 'dest' : '5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty' , 'value' : 1 * 10 ** 15 } ) call = substrate . compose_call ( call_module = 'Utility' , call_function = 'batch' , call_params = { 'calls' : [ balance_call , balance_call ] } ) extrinsic = substrate . create_signed_extrinsic ( call = call , keypair = keypair , era = { 'period' : 64 } ) try : receipt = substrate . submit_extrinsic ( extrinsic , wait_for_inclusion = True ) print ( 'Extrinsic \" {} \" included in block \" {} \"' . format ( receipt . extrinsic_hash , receipt . block_hash )) if receipt . is_success : print ( '\u2705 Success, triggered events:' ) for event in receipt . triggered_events : print ( f '* { event . value } ' ) else : print ( '\u26a0\ufe0f Extrinsic Failed: ' , receipt . error_message ) except SubstrateRequestException as e : print ( \"Failed to send: {} \" . format ( e ))","title":"Batch call"},{"location":"examples/#fee-info","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 from substrateinterface import SubstrateInterface , Keypair # import logging # logging.basicConfig(level=logging.DEBUG) substrate = SubstrateInterface ( url = \"ws://127.0.0.1:9944\" ) keypair = Keypair . create_from_uri ( '//Alice' ) call = substrate . compose_call ( call_module = 'Balances' , call_function = 'transfer' , call_params = { 'dest' : '5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty' , 'value' : 1 * 10 ** 15 } ) # Get payment info payment_info = substrate . get_payment_info ( call = call , keypair = keypair ) print ( \"Payment info: \" , payment_info )","title":"Fee info"},{"location":"examples/#query-a-mapped-storage-function","text":"1 2 3 4 5 6 7 8 9 10 from substrateinterface import SubstrateInterface substrate = SubstrateInterface ( url = \"ws://127.0.0.1:9944\" ) result = substrate . query_map ( \"System\" , \"Account\" , max_results = 100 ) for account , account_info in result : print ( f '* { account . value } : { account_info . value } ' )","title":"Query a Mapped storage function"},{"location":"examples/#multisig-transaction","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 from substrateinterface import SubstrateInterface , Keypair substrate = SubstrateInterface ( url = \"ws://127.0.0.1:9944\" ) keypair_alice = Keypair . create_from_uri ( '//Alice' , ss58_format = substrate . ss58_format ) keypair_bob = Keypair . create_from_uri ( '//Bob' , ss58_format = substrate . ss58_format ) keypair_charlie = Keypair . create_from_uri ( '//Charlie' , ss58_format = substrate . ss58_format ) # Generate multi-sig account from signatories and threshold multisig_account = substrate . generate_multisig_account ( signatories = [ keypair_alice . ss58_address , keypair_bob . ss58_address , keypair_charlie . ss58_address ], threshold = 2 ) call = substrate . compose_call ( call_module = 'Balances' , call_function = 'transfer' , call_params = { 'dest' : keypair_alice . ss58_address , 'value' : 3 * 10 ** 3 } ) # Initiate multisig tx extrinsic = substrate . create_multisig_extrinsic ( call , keypair_alice , multisig_account , era = { 'period' : 64 }) receipt = substrate . submit_extrinsic ( extrinsic , wait_for_inclusion = True ) if not receipt . is_success : print ( f \"\u26a0\ufe0f { receipt . error_message } \" ) exit () # Finalize multisig tx with other signatory extrinsic = substrate . create_multisig_extrinsic ( call , keypair_bob , multisig_account , era = { 'period' : 64 }) receipt = substrate . submit_extrinsic ( extrinsic , wait_for_inclusion = True ) if receipt . is_success : print ( f \"\u2705 { receipt . triggered_events } \" ) else : print ( f \"\u26a0\ufe0f { receipt . error_message } \" )","title":"Multisig transaction"},{"location":"examples/#create-and-call-ink-contract","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 import os from substrateinterface.contracts import ContractCode , ContractInstance from substrateinterface import SubstrateInterface , Keypair substrate = SubstrateInterface ( url = \"ws://127.0.0.1:9944\" , type_registry_preset = 'canvas' ) keypair = Keypair . create_from_uri ( '//Alice' ) contract_address = \"5GhwarrVMH8kjb8XyW6zCfURHbHy3v84afzLbADyYYX6H2Kk\" # Check if contract is on chain contract_info = substrate . query ( \"Contracts\" , \"ContractInfoOf\" , [ contract_address ]) if contract_info . value : print ( f 'Found contract on chain: { contract_info . value } ' ) # Create contract instance from deterministic address contract = ContractInstance . create_from_address ( contract_address = contract_address , metadata_file = os . path . join ( os . path . dirname ( __file__ ), 'assets' , 'flipper.json' ), substrate = substrate ) else : # Upload WASM code code = ContractCode . create_from_contract_files ( metadata_file = os . path . join ( os . path . dirname ( __file__ ), 'assets' , 'flipper.json' ), wasm_file = os . path . join ( os . path . dirname ( __file__ ), 'assets' , 'flipper.wasm' ), substrate = substrate ) # Deploy contract print ( 'Deploy contract...' ) contract = code . deploy ( keypair = keypair , endowment = 0 , gas_limit = 1000000000000 , constructor = \"new\" , args = { 'init_value' : True }, upload_code = True ) print ( f '\u2705 Deployed @ { contract . contract_address } ' ) # Read current value result = contract . read ( keypair , 'get' ) print ( 'Current value of \"get\":' , result . contract_result_data ) # Do a gas estimation of the message gas_predit_result = contract . read ( keypair , 'flip' ) print ( 'Result of dry-run: ' , gas_predit_result . value ) print ( 'Gas estimate: ' , gas_predit_result . gas_required ) # Do the actual call print ( 'Executing contract call...' ) contract_receipt = contract . exec ( keypair , 'flip' , args = { }, gas_limit = gas_predit_result . gas_required ) if contract_receipt . is_success : print ( f 'Events triggered in contract: { contract_receipt . contract_events } ' ) else : print ( f 'Error message: { contract_receipt . error_message } ' ) result = contract . read ( keypair , 'get' ) print ( 'Current value of \"get\":' , result . contract_result_data )","title":"Create and call ink! contract"},{"location":"examples/#historic-balance","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 from substrateinterface import SubstrateInterface substrate = SubstrateInterface ( url = \"ws://127.0.0.1:9944\" ) block_number = 10 block_hash = substrate . get_block_hash ( block_number ) result = substrate . query ( \"System\" , \"Account\" , [ \"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\" ], block_hash = block_hash ) def format_balance ( amount : int ): amount = format ( amount / 10 ** substrate . properties . get ( 'tokenDecimals' , 0 ), \".15g\" ) return f \" { amount } { substrate . properties . get ( 'tokenSymbol' , 'UNIT' ) } \" balance = ( result . value [ \"data\" ][ \"free\" ] + result . value [ \"data\" ][ \"reserved\" ]) print ( f \"Balance @ { block_number } : { format_balance ( balance ) } \" )","title":"Historic balance"},{"location":"examples/#block-headers-subscription","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 from substrateinterface import SubstrateInterface substrate = SubstrateInterface ( url = \"ws://127.0.0.1:9944\" ) def subscription_handler ( obj , update_nr , subscription_id ): print ( f \"New block # { obj [ 'header' ][ 'number' ] } \" ) block = substrate . get_block ( block_number = obj [ 'header' ][ 'number' ]) for idx , extrinsic in enumerate ( block [ 'extrinsics' ]): print ( f '# { idx } : { extrinsic . value } ' ) if update_nr > 2 : return { 'message' : 'Subscription will cancel when a value is returned' , 'updates_processed' : update_nr } result = substrate . subscribe_block_headers ( subscription_handler ) print ( result )","title":"Block headers subscription"},{"location":"examples/#storage-subscription","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 from substrateinterface import SubstrateInterface substrate = SubstrateInterface ( url = \"ws://127.0.0.1:9944\" ) def subscription_handler ( account_info_obj , update_nr , subscription_id ): if update_nr == 0 : print ( 'Initial account data:' , account_info_obj . value ) if update_nr > 0 : # Do something with the update print ( 'Account data changed:' , account_info_obj . value ) # The execution will block until an arbitrary value is returned, which will be the result of the `query` if update_nr > 5 : return account_info_obj result = substrate . query ( \"System\" , \"Account\" , [ \"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\" ], subscription_handler = subscription_handler ) print ( result )","title":"Storage subscription"},{"location":"examples/#subscribe-to-multiple-storage-keys","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from substrateinterface import SubstrateInterface def subscription_handler ( storage_key , updated_obj , update_nr , subscription_id ): print ( f \"Update for { storage_key . params [ 0 ] } : { updated_obj . value } \" ) substrate = SubstrateInterface ( url = \"ws://127.0.0.1:9944\" ) # Accounts to track storage_keys = [ substrate . create_storage_key ( \"System\" , \"Account\" , [ \"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\" ] ), substrate . create_storage_key ( \"System\" , \"Account\" , [ \"5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty\" ] ) ] result = substrate . subscribe_storage ( storage_keys = storage_keys , subscription_handler = subscription_handler )","title":"Subscribe to multiple storage keys"},{"location":"getting-started/common-concepts/","text":"SCALE \u00b6 Substrate uses a lightweight and efficient encoding and decoding program to optimize how data is sent and received over the network. The program used to serialize and deserialize data is called the SCALE codec, with SCALE being an acronym for S imple C oncatenated A ggregate L ittle- E ndian. This library utilizes py-scale-codec for encoding and decoding SCALE, see this overview for more information how to encode data from Python. SS58 address formatting \u00b6 SS58 is a simple address format designed for Substrate based chains. For more information about its specification see the Substrate documentation about SS58 Extrinsics \u00b6 Extrinsics within Substrate are basically signed transactions, a vehicle to execute a call function within the Substrate runtime, originated from outside the runtime. More information about extrinsics on Substrate docs . For more information on which call functions are available in existing Substrate implementations, refer to the PySubstrate Metadata Docs","title":"Common concepts"},{"location":"getting-started/common-concepts/#scale","text":"Substrate uses a lightweight and efficient encoding and decoding program to optimize how data is sent and received over the network. The program used to serialize and deserialize data is called the SCALE codec, with SCALE being an acronym for S imple C oncatenated A ggregate L ittle- E ndian. This library utilizes py-scale-codec for encoding and decoding SCALE, see this overview for more information how to encode data from Python.","title":"SCALE"},{"location":"getting-started/common-concepts/#ss58-address-formatting","text":"SS58 is a simple address format designed for Substrate based chains. For more information about its specification see the Substrate documentation about SS58","title":"SS58 address formatting"},{"location":"getting-started/common-concepts/#extrinsics","text":"Extrinsics within Substrate are basically signed transactions, a vehicle to execute a call function within the Substrate runtime, originated from outside the runtime. More information about extrinsics on Substrate docs . For more information on which call functions are available in existing Substrate implementations, refer to the PySubstrate Metadata Docs","title":"Extrinsics"},{"location":"getting-started/installation/","text":"Install using PyPI \u00b6 1 pip install substrate-interface Initialization \u00b6 1 substrate = SubstrateInterface ( url = \"ws://127.0.0.1:9944\" ) After connecting certain properties like ss58_format will be determined automatically by querying the RPC node. At the moment this will work for most MetadataV14 and above runtimes like Polkadot, Kusama, Acala, Moonbeam. For older or runtimes under development the ss58_format (default 42) and other properties should be set manually. Quick usage \u00b6 Balance information of an account \u00b6 1 2 result = substrate . query ( 'System' , 'Account' , [ 'F4xQKRUagnSGjFqafyhajLs94e7Vvzvr8ebwYJceKpr8R7T' ]) print ( result . value [ 'data' ][ 'free' ]) # 635278638077956496 Create balance transfer extrinsic \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 call = substrate . compose_call ( call_module = 'Balances' , call_function = 'transfer' , call_params = { 'dest' : '5E9oDs9PjpsBbxXxRE9uMaZZhnBAV38n2ouLB28oecBDdeQo' , 'value' : 1 * 10 ** 12 } ) keypair = Keypair . create_from_uri ( '//Alice' ) extrinsic = substrate . create_signed_extrinsic ( call = call , keypair = keypair ) receipt = substrate . submit_extrinsic ( extrinsic , wait_for_inclusion = True ) print ( f \"Extrinsic ' { receipt . extrinsic_hash } ' sent and included in block ' { receipt . block_hash } '\" )","title":"Installation"},{"location":"getting-started/installation/#install-using-pypi","text":"1 pip install substrate-interface","title":"Install using PyPI"},{"location":"getting-started/installation/#initialization","text":"1 substrate = SubstrateInterface ( url = \"ws://127.0.0.1:9944\" ) After connecting certain properties like ss58_format will be determined automatically by querying the RPC node. At the moment this will work for most MetadataV14 and above runtimes like Polkadot, Kusama, Acala, Moonbeam. For older or runtimes under development the ss58_format (default 42) and other properties should be set manually.","title":"Initialization"},{"location":"getting-started/installation/#quick-usage","text":"","title":"Quick usage"},{"location":"getting-started/installation/#balance-information-of-an-account","text":"1 2 result = substrate . query ( 'System' , 'Account' , [ 'F4xQKRUagnSGjFqafyhajLs94e7Vvzvr8ebwYJceKpr8R7T' ]) print ( result . value [ 'data' ][ 'free' ]) # 635278638077956496","title":"Balance information of an account"},{"location":"getting-started/installation/#create-balance-transfer-extrinsic","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 call = substrate . compose_call ( call_module = 'Balances' , call_function = 'transfer' , call_params = { 'dest' : '5E9oDs9PjpsBbxXxRE9uMaZZhnBAV38n2ouLB28oecBDdeQo' , 'value' : 1 * 10 ** 12 } ) keypair = Keypair . create_from_uri ( '//Alice' ) extrinsic = substrate . create_signed_extrinsic ( call = call , keypair = keypair ) receipt = substrate . submit_extrinsic ( extrinsic , wait_for_inclusion = True ) print ( f \"Extrinsic ' { receipt . extrinsic_hash } ' sent and included in block ' { receipt . block_hash } '\" )","title":"Create balance transfer extrinsic"},{"location":"reference/base/","text":"SubstrateInterface \u00b6 __init__ ( url = None , websocket = None , ss58_format = None , type_registry = None , type_registry_preset = None , cache_region = None , runtime_config = None , use_remote_preset = False , ws_options = None , auto_discover = True , auto_reconnect = True ) \u00b6 A specialized class in interfacing with a Substrate node. Parameters: Name Type Description Default url None ss58_format None type_registry None type_registry_preset None cache_region None use_remote_preset False ws_options None connect_websocket () \u00b6 (Re)creates the websocket connection, if the URL contains a 'ws' or 'wss' scheme close () \u00b6 Cleans up resources for this instance like active websocket connection and active extensions debug_message ( message : str ) staticmethod \u00b6 Submits a message to the debug logger Parameters: Name Type Description Default message str required supports_rpc_method ( name : str ) -> bool \u00b6 Check if substrate RPC supports given method Parameters: Name Type Description Default name str required Returns: Type Description bool rpc_request ( method , params , result_handler = None ) \u00b6 Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually use this method to perform the request. Parameters: Name Type Description Default result_handler None method required params required Returns: Type Description a dict with the parsed result of the request. implements_scaleinfo () -> Optional [ bool ] \u00b6 Returns True if current runtime implementation a PortableRegistry ( MetadataV14 and higher) Returns: Type Description bool get_chain_head () \u00b6 A pass-though to existing JSONRPC method chain_getHead get_chain_finalised_head () \u00b6 A pass-though to existing JSONRPC method chain_getFinalisedHead get_block_hash ( block_id : int ) -> str \u00b6 A pass-though to existing JSONRPC method chain_getBlockHash Parameters: Name Type Description Default block_id int required get_block_number ( block_hash : str ) -> int \u00b6 A convenience method to get the block number for given block_hash Parameters: Name Type Description Default block_hash str required get_block_metadata ( block_hash = None , decode = True ) \u00b6 A pass-though to existing JSONRPC method state_getMetadata . Parameters: Name Type Description Default block_hash None decode True get_storage_by_key ( block_hash : str , storage_key : str ) \u00b6 A pass-though to existing JSONRPC method state_getStorageAt Parameters: Name Type Description Default block_hash str required storage_key str required get_block_runtime_version ( block_hash ) \u00b6 Retrieve the runtime version id of given block_hash Parameters: Name Type Description Default block_hash required generate_storage_hash ( storage_module : str , storage_function : str , params : list = None , hashers : list = None ) \u00b6 Generate a storage key for given module/function Parameters: Name Type Description Default storage_module str required storage_function str required params list None hashers list None Returns: Type Description str Hexstring respresentation of the storage key init_runtime ( block_hash = None , block_id = None ) \u00b6 This method is used by all other methods that deals with metadata and types defined in the type registry. It optionally retrieves the block_hash when block_id is given and sets the applicable metadata for that block_hash. Also it applies all the versioned types at the time of the block_hash. Because parsing of metadata and type registry is quite heavy, the result will be cached per runtime id. In the future there could be support for caching backends like Redis to make this cache more persistent. Parameters: Name Type Description Default block_hash None block_id None query_map ( module : str , storage_function : str , params : Optional [ list ] = None , block_hash : str = None , max_results : int = None , start_key : str = None , page_size : int = 100 , ignore_decoding_errors : bool = True ) -> QueryMapResult \u00b6 Iterates over all key-pairs located at the given module and storage_function. The storage item must be a map. Example: 1 2 3 4 result = substrate.query_map('System', 'Account', max_results=100) for account, account_info in result: print(f\"Free balance of account '{account.value}': {account_info.value['data']['free']}\") Parameters: Name Type Description Default module str required storage_function str required params Optional [ list ] None block_hash str None max_results int None start_key str None page_size int 100 ignore_decoding_errors bool True Returns: Type Description QueryMapResult query ( module : str , storage_function : str , params : list = None , block_hash : str = None , subscription_handler : callable = None , raw_storage_key : bytes = None ) -> ScaleType \u00b6 Retrieves the storage entry for given module, function and optional parameters at given block hash. When a subscription_handler callback function is passed, a subscription will be maintained as long as this handler doesn't return a value. Example of subscription handler: 1 2 3 4 5 6 7 8 9 10 11 12 def subscription_handler(obj, update_nr, subscription_id): if update_nr == 0: print('Initial data:', obj.value) if update_nr > 0: # Do something with the update print('data changed:', obj.value) # The execution will block until an arbitrary value is returned, which will be the result of the `query` if update_nr > 1: return obj Parameters: Name Type Description Default module str required storage_function str required params list None block_hash str None subscription_handler callable None raw_storage_key bytes None Returns: Type Description ScaleType __query_well_known ( name : str , block_hash : str ) -> ScaleType \u00b6 Query well-known storage keys as defined in Substrate Parameters: Name Type Description Default name str required block_hash str required Returns: Type Description Optional [ ScaleType ] create_storage_key ( pallet : str , storage_function : str , params : Optional [ list ] = None ) -> StorageKey \u00b6 Create a StorageKey instance providing storage function details. See subscribe_storage() . Parameters: Name Type Description Default pallet str required storage_function str required params Optional [ list ] None Returns: Type Description StorageKey subscribe_storage ( storage_keys : List [ StorageKey ], subscription_handler : callable ) \u00b6 Subscribe to provided storage_keys and keep tracking until subscription_handler returns a value Example of a StorageKey: 1 2 3 StorageKey.create_from_storage_function( \"System\", \"Account\", [\"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\"] ) Example of a subscription handler: 1 2 3 4 5 6 7 8 9 10 11 12 def subscription_handler(storage_key, obj, update_nr, subscription_id): if update_nr == 0: print('Initial data:', storage_key, obj.value) if update_nr > 0: # Do something with the update print('data changed:', storage_key, obj.value) # The execution will block until an arbitrary value is returned, which will be the result of the function if update_nr > 1: return obj Parameters: Name Type Description Default storage_keys List [ StorageKey ] required subscription_handler callable required retrieve_pending_extrinsics () -> list \u00b6 Retrieves and decodes pending extrinsics from the node's transaction pool Returns: Type Description list of extrinsics runtime_call ( api : str , method : str , params : Union [ list , dict ] = None ) -> ScaleType \u00b6 Calls a runtime API method Parameters: Name Type Description Default api str required method str required params Union [ list , dict ] None Returns: Type Description ScaleType get_events ( block_hash : str = None ) -> list \u00b6 Convenience method to get events for a certain block (storage call for module 'System' and function 'Events') Parameters: Name Type Description Default block_hash str None Returns: Type Description list get_metadata ( block_hash = None ) \u00b6 Returns MetadataVersioned object for given block_hash or chaintip if block_hash is omitted Parameters: Name Type Description Default block_hash None Returns: Type Description MetadataVersioned get_runtime_metadata ( block_hash = None ) \u00b6 Retrieves and decodes the metadata for given block or chaintip if block_hash is omitted. Parameters: Name Type Description Default block_hash None create_scale_object ( type_string : str , data : ScaleBytes = None , block_hash : str = None , ** kwargs ) -> ScaleType \u00b6 Convenience method to create a SCALE object of type type_string , this will initialize the runtime automatically at moment of block_hash , or chain tip if omitted. Parameters: Name Type Description Default type_string str required data ScaleBytes None block_hash str None kwargs {} Returns: Type Description ScaleType compose_call ( call_module : str , call_function : str , call_params : dict = None , block_hash : str = None ) \u00b6 Composes a call payload which can be used in an extrinsic. Parameters: Name Type Description Default call_module str required call_function str required call_params dict None block_hash str None Returns: Type Description GenericCall get_account_nonce ( account_address ) -> int \u00b6 Returns current nonce for given account address Parameters: Name Type Description Default account_address required Returns: Type Description int create_signed_extrinsic ( call : GenericCall , keypair : Keypair , era : dict = None , nonce : int = None , tip : int = 0 , tip_asset_id : int = None , signature : Union [ bytes , str ] = None ) -> GenericExtrinsic \u00b6 Creates a extrinsic signed by given account details Parameters: Name Type Description Default call GenericCall required keypair Keypair required era dict None nonce int None tip int 0 tip_asset_id int None signature Union [ bytes , str ] None Returns: Type Description GenericExtrinsic The signed Extrinsic create_unsigned_extrinsic ( call : GenericCall ) -> GenericExtrinsic \u00b6 Create unsigned extrinsic for given Call Parameters: Name Type Description Default call GenericCall required Returns: Type Description GenericExtrinsic generate_multisig_account ( signatories : list , threshold : int ) -> MultiAccountId \u00b6 Generate deterministic Multisig account with supplied signatories and threshold Parameters: Name Type Description Default signatories list required threshold int required Returns: Type Description MultiAccountId create_multisig_extrinsic ( call : GenericCall , keypair : Keypair , multisig_account : MultiAccountId , max_weight : Optional [ Union [ dict , int ]] = None , era : dict = None , nonce : int = None , tip : int = 0 , tip_asset_id : int = None , signature : Union [ bytes , str ] = None ) -> GenericExtrinsic \u00b6 Create a Multisig extrinsic that will be signed by one of the signatories. Checks on-chain if the threshold of the multisig account is reached and try to execute the call accordingly. Parameters: Name Type Description Default call GenericCall required keypair Keypair required multisig_account MultiAccountId required max_weight Optional [ Union [ dict , int ]] None era dict None nonce int None tip int 0 tip_asset_id int None signature Union [ bytes , str ] None Returns: Type Description GenericExtrinsic submit_extrinsic ( extrinsic : GenericExtrinsic , wait_for_inclusion : bool = False , wait_for_finalization : bool = False ) -> ExtrinsicReceipt \u00b6 Submit an extrinsic to the connected node, with the possibility to wait until the extrinsic is included in a block and/or the block is finalized. The receipt returned provided information about the block and triggered events Parameters: Name Type Description Default extrinsic GenericExtrinsic required wait_for_inclusion bool False wait_for_finalization bool False Returns: Type Description ExtrinsicReceipt get_payment_info ( call : GenericCall , keypair : Keypair ) \u00b6 Retrieves fee estimation via RPC for given extrinsic Parameters: Name Type Description Default call GenericCall required keypair Keypair required Returns: Type Description Dict with payment info E.g. {'class': 'normal', 'partialFee': 151000000, 'weight': {'ref_time': 143322000}} get_type_registry ( block_hash : str = None , max_recursion : int = 4 ) -> dict \u00b6 Generates an exhaustive list of which RUST types exist in the runtime specified at given block_hash (or chaintip if block_hash is omitted) MetadataV14 or higher is required. Parameters: Name Type Description Default block_hash str None max_recursion int 4 Returns: Type Description dict get_type_definition ( type_string : str , block_hash : str = None ) \u00b6 Retrieves SCALE encoding specifications of given type_string Parameters: Name Type Description Default type_string str required block_hash str None get_metadata_modules ( block_hash = None ) \u00b6 Retrieves a list of modules in metadata for given block_hash (or chaintip if block_hash is omitted) Parameters: Name Type Description Default block_hash None get_metadata_module ( name , block_hash = None ) \u00b6 Retrieves modules in metadata by name for given block_hash (or chaintip if block_hash is omitted) Parameters: Name Type Description Default name required block_hash None Returns: Type Description MetadataModule get_metadata_call_functions ( block_hash = None ) -> list \u00b6 Retrieves a list of all call functions in metadata active for given block_hash (or chaintip if block_hash is omitted) Parameters: Name Type Description Default block_hash None Returns: Type Description list get_metadata_call_function ( module_name : str , call_function_name : str , block_hash : str = None ) \u00b6 Retrieves the details of a call function given module name, call function name and block_hash (or chaintip if block_hash is omitted) Parameters: Name Type Description Default module_name str required call_function_name str required block_hash str None get_metadata_events ( block_hash = None ) -> list \u00b6 Retrieves a list of all events in metadata active for given block_hash (or chaintip if block_hash is omitted) Parameters: Name Type Description Default block_hash None Returns: Type Description list get_metadata_event ( module_name , event_name , block_hash = None ) \u00b6 Retrieves the details of an event for given module name, call function name and block_hash (or chaintip if block_hash is omitted) Parameters: Name Type Description Default module_name required event_name required block_hash None get_metadata_constants ( block_hash = None ) -> list \u00b6 Retrieves a list of all constants in metadata active at given block_hash (or chaintip if block_hash is omitted) Parameters: Name Type Description Default block_hash None Returns: Type Description list get_metadata_constant ( module_name , constant_name , block_hash = None ) \u00b6 Retrieves the details of a constant for given module name, call function name and block_hash (or chaintip if block_hash is omitted) Parameters: Name Type Description Default module_name required constant_name required block_hash None Returns: Type Description MetadataModuleConstants get_constant ( module_name , constant_name , block_hash = None ) -> Optional [ ScaleType ] \u00b6 Returns the decoded ScaleType object of the constant for given module name, call function name and block_hash (or chaintip if block_hash is omitted) Parameters: Name Type Description Default module_name required constant_name required block_hash None Returns: Type Description ScaleType get_metadata_storage_functions ( block_hash = None ) -> list \u00b6 Retrieves a list of all storage functions in metadata active at given block_hash (or chaintip if block_hash is omitted) Parameters: Name Type Description Default block_hash None Returns: Type Description list get_metadata_storage_function ( module_name , storage_name , block_hash = None ) \u00b6 Retrieves the details of a storage function for given module name, call function name and block_hash Parameters: Name Type Description Default module_name required storage_name required block_hash None get_metadata_errors ( block_hash = None ) -> list \u00b6 Retrieves a list of all errors in metadata active at given block_hash (or chaintip if block_hash is omitted) Parameters: Name Type Description Default block_hash None Returns: Type Description list get_metadata_error ( module_name , error_name , block_hash = None ) \u00b6 Retrieves the details of an error for given module name, call function name and block_hash Parameters: Name Type Description Default module_name required error_name required block_hash None get_metadata_runtime_call_functions () -> list \u00b6 Get a list of available runtime API calls Returns: Type Description list get_metadata_runtime_call_function ( api : str , method : str ) -> GenericRuntimeCallDefinition \u00b6 Get details of a runtime API call Parameters: Name Type Description Default api str required method str required Returns: Type Description GenericRuntimeCallDefinition get_block ( block_hash : str = None , block_number : int = None , ignore_decoding_errors : bool = False , include_author : bool = False , finalized_only : bool = False ) -> Optional [ dict ] \u00b6 Retrieves a block and decodes its containing extrinsics and log digest items. If block_hash and block_number is omited the chain tip will be retrieve, or the finalized head if finalized_only is set to true. Either block_hash or block_number should be set, or both omitted. Parameters: Name Type Description Default block_hash str None block_number int None ignore_decoding_errors bool False include_author bool False finalized_only bool False Returns: Type Description A dict containing the extrinsic and digest logs data get_block_header ( block_hash : str = None , block_number : int = None , ignore_decoding_errors : bool = False , include_author : bool = False , finalized_only : bool = False ) \u00b6 Retrieves a block header and decodes its containing log digest items. If block_hash and block_number is omited the chain tip will be retrieve, or the finalized head if finalized_only is set to true. Either block_hash or block_number should be set, or both omitted. See get_block() to also include the extrinsics in the result Parameters: Name Type Description Default block_hash str None block_number int None ignore_decoding_errors bool False include_author bool False finalized_only bool False Returns: Type Description A dict containing the header and digest logs data subscribe_block_headers ( subscription_handler : callable , ignore_decoding_errors : bool = False , include_author : bool = False , finalized_only = False ) \u00b6 Subscribe to new block headers as soon as they are available. The callable subscription_handler will be executed when a new block is available and execution will block until subscription_handler will return a result other than None . Example: 1 2 3 4 5 6 7 8 9 def subscription_handler(obj, update_nr, subscription_id): print(f\"New block #{obj['header']['number']} produced by {obj['header']['author']}\") if update_nr > 10 return {'message': 'Subscription will cancel when a value is returned', 'updates_processed': update_nr} result = substrate.subscribe_block_headers(subscription_handler, include_author=True) Parameters: Name Type Description Default subscription_handler callable required ignore_decoding_errors bool False include_author bool False finalized_only False Returns: Type Description Value return by retrieve_extrinsic_by_identifier ( extrinsic_identifier : str ) -> ExtrinsicReceipt \u00b6 Retrieve an extrinsic by its identifier in format \"[block_number]-[extrinsic_index]\" e.g. 333456-4 Parameters: Name Type Description Default extrinsic_identifier str required Returns: Type Description ExtrinsicReceipt retrieve_extrinsic_by_hash ( block_hash : str , extrinsic_hash : str ) -> ExtrinsicReceipt \u00b6 Retrieve an extrinsic by providing the block_hash and the extrinsic hash Parameters: Name Type Description Default block_hash str required extrinsic_hash str required Returns: Type Description ExtrinsicReceipt get_extrinsics ( block_hash : str = None , block_number : int = None ) -> list \u00b6 Return extrinsics for given block_hash or block_number Parameters: Name Type Description Default block_hash str None block_number int None decode_scale ( type_string , scale_bytes , block_hash = None , return_scale_obj = False ) \u00b6 Helper function to decode arbitrary SCALE-bytes (e.g. 0x02000000) according to given RUST type_string (e.g. BlockNumber). The relevant versioning information of the type (if defined) will be applied if block_hash is set Parameters: Name Type Description Default type_string required scale_bytes required block_hash None return_scale_obj False encode_scale ( type_string , value , block_hash = None ) -> ScaleBytes \u00b6 Helper function to encode arbitrary data into SCALE-bytes for given RUST type_string Parameters: Name Type Description Default type_string required value required block_hash None Returns: Type Description ScaleBytes ss58_encode ( public_key : Union [ str , bytes ], ss58_format : int = None ) -> str \u00b6 Helper function to encode a public key to SS58 address. If no target ss58_format is provided, it will default to the ss58 format of the network it's connected to. Parameters: Name Type Description Default public_key Union [ str , bytes ] required ss58_format int None Returns: Type Description str containing the SS58 address ss58_decode ( ss58_address : str ) -> str \u00b6 Helper function to decode a SS58 address to a public key Parameters: Name Type Description Default ss58_address str required Returns: Type Description str containing the hex representation of the public key is_valid_ss58_address ( value : str ) -> bool \u00b6 Helper function to validate given value as ss58_address for current network/ss58_format Parameters: Name Type Description Default value str required Returns: Type Description bool serialize_storage_item ( storage_item , module , spec_version_id ) -> dict \u00b6 Helper function to serialize a storage item Parameters: Name Type Description Default storage_item required module required spec_version_id required Returns: Type Description dict serialize_constant ( constant , module , spec_version_id ) -> dict \u00b6 Helper function to serialize a constant Parameters: Name Type Description Default constant required module required spec_version_id required Returns: Type Description dict serialize_module_call ( module , call , spec_version , call_index = None ) -> dict \u00b6 Helper function to serialize a call function Parameters: Name Type Description Default module required call required spec_version required call_index None Returns: Type Description dict serialize_module_event ( module , event , spec_version , event_index ) -> dict \u00b6 Helper function to serialize an event Parameters: Name Type Description Default module required event required spec_version required event_index required Returns: Type Description dict serialize_module_error ( module , error , spec_version ) -> dict \u00b6 Helper function to serialize an error Parameters: Name Type Description Default module required error required spec_version required Returns: Type Description dict reload_type_registry ( use_remote_preset : bool = True , auto_discover : bool = True ) \u00b6 Reload type registry and preset used to instantiate the SubtrateInterface object. Useful to periodically apply changes in type definitions when a runtime upgrade occurred Parameters: Name Type Description Default use_remote_preset bool True auto_discover bool True register_extension ( extension : Extension ) \u00b6 Register an Extension and adds its functionality to the ExtensionRegistry Parameters: Name Type Description Default extension Extension required ExtrinsicReceipt \u00b6 Object containing information of submitted extrinsic. Block hash where extrinsic is included is required when retrieving triggered events or determine if extrinsic was succesfull extrinsic_idx : int property \u00b6 Retrieves the index of this extrinsic in containing block Returns: Type Description int extrinsic : GenericExtrinsic property \u00b6 Retrieves the Extrinsic subject of this receipt Returns: Type Description Extrinsic triggered_events : list property \u00b6 Gets triggered events for submitted extrinsic. block_hash where extrinsic is included is required, manually set block_hash or use wait_for_inclusion when submitting extrinsic Returns: Type Description list is_success : bool property \u00b6 Returns True if ExtrinsicSuccess event is triggered, False in case of ExtrinsicFailed In case of False error_message will contain more details about the error Returns: Type Description bool error_message : Optional [ dict ] property \u00b6 Returns the error message if the extrinsic failed in format e.g.: {'type': 'System', 'name': 'BadOrigin', 'docs': 'Bad origin'} Returns: Type Description dict weight : Union [ int , dict ] property \u00b6 Contains the actual weight when executing this extrinsic Returns: Type Description int (WeightV1) or dict (WeightV2) total_fee_amount : int property \u00b6 Contains the total fee costs deducted when executing this extrinsic. This includes fee for the validator ( ( Balances.Deposit event) and the fee deposited for the treasury ( Treasury.Deposit event) Returns: Type Description int __init__ ( substrate : SubstrateInterface , extrinsic_hash : str = None , block_hash : str = None , block_number : int = None , extrinsic_idx : int = None , finalized = None ) \u00b6 Object containing information of submitted extrinsic. Block hash where extrinsic is included is required when retrieving triggered events or determine if extrinsic was succesfull Parameters: Name Type Description Default substrate SubstrateInterface required extrinsic_hash str None block_hash str None finalized None get_extrinsic_identifier () -> str \u00b6 Returns the on-chain identifier for this extrinsic in format \"[block_number]-[extrinsic_idx]\" e.g. 134324-2 Returns: Type Description str create_from_extrinsic_identifier ( substrate : SubstrateInterface , extrinsic_identifier : str ) -> ExtrinsicReceipt classmethod \u00b6 Create an ExtrinsicReceipt with on-chain identifier for this extrinsic in format \"[block_number]-[extrinsic_idx]\" e.g. 134324-2 Parameters: Name Type Description Default substrate SubstrateInterface required extrinsic_identifier str required Returns: Type Description ExtrinsicReceipt __get_extrinsic_index ( block_extrinsics : list , extrinsic_hash : str ) -> int staticmethod \u00b6 Returns the index of a provided extrinsic","title":"Base"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface","text":"","title":"SubstrateInterface"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.__init__","text":"A specialized class in interfacing with a Substrate node. Parameters: Name Type Description Default url None ss58_format None type_registry None type_registry_preset None cache_region None use_remote_preset False ws_options None","title":"__init__()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.connect_websocket","text":"(Re)creates the websocket connection, if the URL contains a 'ws' or 'wss' scheme","title":"connect_websocket()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.close","text":"Cleans up resources for this instance like active websocket connection and active extensions","title":"close()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.debug_message","text":"Submits a message to the debug logger Parameters: Name Type Description Default message str required","title":"debug_message()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.supports_rpc_method","text":"Check if substrate RPC supports given method Parameters: Name Type Description Default name str required Returns: Type Description bool","title":"supports_rpc_method()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.rpc_request","text":"Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually use this method to perform the request. Parameters: Name Type Description Default result_handler None method required params required Returns: Type Description a dict with the parsed result of the request.","title":"rpc_request()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.implements_scaleinfo","text":"Returns True if current runtime implementation a PortableRegistry ( MetadataV14 and higher) Returns: Type Description bool","title":"implements_scaleinfo()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_chain_head","text":"A pass-though to existing JSONRPC method chain_getHead","title":"get_chain_head()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_chain_finalised_head","text":"A pass-though to existing JSONRPC method chain_getFinalisedHead","title":"get_chain_finalised_head()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_block_hash","text":"A pass-though to existing JSONRPC method chain_getBlockHash Parameters: Name Type Description Default block_id int required","title":"get_block_hash()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_block_number","text":"A convenience method to get the block number for given block_hash Parameters: Name Type Description Default block_hash str required","title":"get_block_number()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_block_metadata","text":"A pass-though to existing JSONRPC method state_getMetadata . Parameters: Name Type Description Default block_hash None decode True","title":"get_block_metadata()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_storage_by_key","text":"A pass-though to existing JSONRPC method state_getStorageAt Parameters: Name Type Description Default block_hash str required storage_key str required","title":"get_storage_by_key()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_block_runtime_version","text":"Retrieve the runtime version id of given block_hash Parameters: Name Type Description Default block_hash required","title":"get_block_runtime_version()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.generate_storage_hash","text":"Generate a storage key for given module/function Parameters: Name Type Description Default storage_module str required storage_function str required params list None hashers list None Returns: Type Description str Hexstring respresentation of the storage key","title":"generate_storage_hash()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.init_runtime","text":"This method is used by all other methods that deals with metadata and types defined in the type registry. It optionally retrieves the block_hash when block_id is given and sets the applicable metadata for that block_hash. Also it applies all the versioned types at the time of the block_hash. Because parsing of metadata and type registry is quite heavy, the result will be cached per runtime id. In the future there could be support for caching backends like Redis to make this cache more persistent. Parameters: Name Type Description Default block_hash None block_id None","title":"init_runtime()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.query_map","text":"Iterates over all key-pairs located at the given module and storage_function. The storage item must be a map. Example: 1 2 3 4 result = substrate.query_map('System', 'Account', max_results=100) for account, account_info in result: print(f\"Free balance of account '{account.value}': {account_info.value['data']['free']}\") Parameters: Name Type Description Default module str required storage_function str required params Optional [ list ] None block_hash str None max_results int None start_key str None page_size int 100 ignore_decoding_errors bool True Returns: Type Description QueryMapResult","title":"query_map()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.query","text":"Retrieves the storage entry for given module, function and optional parameters at given block hash. When a subscription_handler callback function is passed, a subscription will be maintained as long as this handler doesn't return a value. Example of subscription handler: 1 2 3 4 5 6 7 8 9 10 11 12 def subscription_handler(obj, update_nr, subscription_id): if update_nr == 0: print('Initial data:', obj.value) if update_nr > 0: # Do something with the update print('data changed:', obj.value) # The execution will block until an arbitrary value is returned, which will be the result of the `query` if update_nr > 1: return obj Parameters: Name Type Description Default module str required storage_function str required params list None block_hash str None subscription_handler callable None raw_storage_key bytes None Returns: Type Description ScaleType","title":"query()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.__query_well_known","text":"Query well-known storage keys as defined in Substrate Parameters: Name Type Description Default name str required block_hash str required Returns: Type Description Optional [ ScaleType ]","title":"__query_well_known()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.create_storage_key","text":"Create a StorageKey instance providing storage function details. See subscribe_storage() . Parameters: Name Type Description Default pallet str required storage_function str required params Optional [ list ] None Returns: Type Description StorageKey","title":"create_storage_key()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.subscribe_storage","text":"Subscribe to provided storage_keys and keep tracking until subscription_handler returns a value Example of a StorageKey: 1 2 3 StorageKey.create_from_storage_function( \"System\", \"Account\", [\"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\"] ) Example of a subscription handler: 1 2 3 4 5 6 7 8 9 10 11 12 def subscription_handler(storage_key, obj, update_nr, subscription_id): if update_nr == 0: print('Initial data:', storage_key, obj.value) if update_nr > 0: # Do something with the update print('data changed:', storage_key, obj.value) # The execution will block until an arbitrary value is returned, which will be the result of the function if update_nr > 1: return obj Parameters: Name Type Description Default storage_keys List [ StorageKey ] required subscription_handler callable required","title":"subscribe_storage()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.retrieve_pending_extrinsics","text":"Retrieves and decodes pending extrinsics from the node's transaction pool Returns: Type Description list of extrinsics","title":"retrieve_pending_extrinsics()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.runtime_call","text":"Calls a runtime API method Parameters: Name Type Description Default api str required method str required params Union [ list , dict ] None Returns: Type Description ScaleType","title":"runtime_call()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_events","text":"Convenience method to get events for a certain block (storage call for module 'System' and function 'Events') Parameters: Name Type Description Default block_hash str None Returns: Type Description list","title":"get_events()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_metadata","text":"Returns MetadataVersioned object for given block_hash or chaintip if block_hash is omitted Parameters: Name Type Description Default block_hash None Returns: Type Description MetadataVersioned","title":"get_metadata()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_runtime_metadata","text":"Retrieves and decodes the metadata for given block or chaintip if block_hash is omitted. Parameters: Name Type Description Default block_hash None","title":"get_runtime_metadata()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.create_scale_object","text":"Convenience method to create a SCALE object of type type_string , this will initialize the runtime automatically at moment of block_hash , or chain tip if omitted. Parameters: Name Type Description Default type_string str required data ScaleBytes None block_hash str None kwargs {} Returns: Type Description ScaleType","title":"create_scale_object()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.compose_call","text":"Composes a call payload which can be used in an extrinsic. Parameters: Name Type Description Default call_module str required call_function str required call_params dict None block_hash str None Returns: Type Description GenericCall","title":"compose_call()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_account_nonce","text":"Returns current nonce for given account address Parameters: Name Type Description Default account_address required Returns: Type Description int","title":"get_account_nonce()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.create_signed_extrinsic","text":"Creates a extrinsic signed by given account details Parameters: Name Type Description Default call GenericCall required keypair Keypair required era dict None nonce int None tip int 0 tip_asset_id int None signature Union [ bytes , str ] None Returns: Type Description GenericExtrinsic The signed Extrinsic","title":"create_signed_extrinsic()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.create_unsigned_extrinsic","text":"Create unsigned extrinsic for given Call Parameters: Name Type Description Default call GenericCall required Returns: Type Description GenericExtrinsic","title":"create_unsigned_extrinsic()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.generate_multisig_account","text":"Generate deterministic Multisig account with supplied signatories and threshold Parameters: Name Type Description Default signatories list required threshold int required Returns: Type Description MultiAccountId","title":"generate_multisig_account()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.create_multisig_extrinsic","text":"Create a Multisig extrinsic that will be signed by one of the signatories. Checks on-chain if the threshold of the multisig account is reached and try to execute the call accordingly. Parameters: Name Type Description Default call GenericCall required keypair Keypair required multisig_account MultiAccountId required max_weight Optional [ Union [ dict , int ]] None era dict None nonce int None tip int 0 tip_asset_id int None signature Union [ bytes , str ] None Returns: Type Description GenericExtrinsic","title":"create_multisig_extrinsic()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.submit_extrinsic","text":"Submit an extrinsic to the connected node, with the possibility to wait until the extrinsic is included in a block and/or the block is finalized. The receipt returned provided information about the block and triggered events Parameters: Name Type Description Default extrinsic GenericExtrinsic required wait_for_inclusion bool False wait_for_finalization bool False Returns: Type Description ExtrinsicReceipt","title":"submit_extrinsic()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_payment_info","text":"Retrieves fee estimation via RPC for given extrinsic Parameters: Name Type Description Default call GenericCall required keypair Keypair required Returns: Type Description Dict with payment info E.g. {'class': 'normal', 'partialFee': 151000000, 'weight': {'ref_time': 143322000}}","title":"get_payment_info()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_type_registry","text":"Generates an exhaustive list of which RUST types exist in the runtime specified at given block_hash (or chaintip if block_hash is omitted) MetadataV14 or higher is required. Parameters: Name Type Description Default block_hash str None max_recursion int 4 Returns: Type Description dict","title":"get_type_registry()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_type_definition","text":"Retrieves SCALE encoding specifications of given type_string Parameters: Name Type Description Default type_string str required block_hash str None","title":"get_type_definition()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_metadata_modules","text":"Retrieves a list of modules in metadata for given block_hash (or chaintip if block_hash is omitted) Parameters: Name Type Description Default block_hash None","title":"get_metadata_modules()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_metadata_module","text":"Retrieves modules in metadata by name for given block_hash (or chaintip if block_hash is omitted) Parameters: Name Type Description Default name required block_hash None Returns: Type Description MetadataModule","title":"get_metadata_module()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_metadata_call_functions","text":"Retrieves a list of all call functions in metadata active for given block_hash (or chaintip if block_hash is omitted) Parameters: Name Type Description Default block_hash None Returns: Type Description list","title":"get_metadata_call_functions()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_metadata_call_function","text":"Retrieves the details of a call function given module name, call function name and block_hash (or chaintip if block_hash is omitted) Parameters: Name Type Description Default module_name str required call_function_name str required block_hash str None","title":"get_metadata_call_function()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_metadata_events","text":"Retrieves a list of all events in metadata active for given block_hash (or chaintip if block_hash is omitted) Parameters: Name Type Description Default block_hash None Returns: Type Description list","title":"get_metadata_events()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_metadata_event","text":"Retrieves the details of an event for given module name, call function name and block_hash (or chaintip if block_hash is omitted) Parameters: Name Type Description Default module_name required event_name required block_hash None","title":"get_metadata_event()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_metadata_constants","text":"Retrieves a list of all constants in metadata active at given block_hash (or chaintip if block_hash is omitted) Parameters: Name Type Description Default block_hash None Returns: Type Description list","title":"get_metadata_constants()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_metadata_constant","text":"Retrieves the details of a constant for given module name, call function name and block_hash (or chaintip if block_hash is omitted) Parameters: Name Type Description Default module_name required constant_name required block_hash None Returns: Type Description MetadataModuleConstants","title":"get_metadata_constant()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_constant","text":"Returns the decoded ScaleType object of the constant for given module name, call function name and block_hash (or chaintip if block_hash is omitted) Parameters: Name Type Description Default module_name required constant_name required block_hash None Returns: Type Description ScaleType","title":"get_constant()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_metadata_storage_functions","text":"Retrieves a list of all storage functions in metadata active at given block_hash (or chaintip if block_hash is omitted) Parameters: Name Type Description Default block_hash None Returns: Type Description list","title":"get_metadata_storage_functions()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_metadata_storage_function","text":"Retrieves the details of a storage function for given module name, call function name and block_hash Parameters: Name Type Description Default module_name required storage_name required block_hash None","title":"get_metadata_storage_function()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_metadata_errors","text":"Retrieves a list of all errors in metadata active at given block_hash (or chaintip if block_hash is omitted) Parameters: Name Type Description Default block_hash None Returns: Type Description list","title":"get_metadata_errors()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_metadata_error","text":"Retrieves the details of an error for given module name, call function name and block_hash Parameters: Name Type Description Default module_name required error_name required block_hash None","title":"get_metadata_error()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_metadata_runtime_call_functions","text":"Get a list of available runtime API calls Returns: Type Description list","title":"get_metadata_runtime_call_functions()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_metadata_runtime_call_function","text":"Get details of a runtime API call Parameters: Name Type Description Default api str required method str required Returns: Type Description GenericRuntimeCallDefinition","title":"get_metadata_runtime_call_function()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_block","text":"Retrieves a block and decodes its containing extrinsics and log digest items. If block_hash and block_number is omited the chain tip will be retrieve, or the finalized head if finalized_only is set to true. Either block_hash or block_number should be set, or both omitted. Parameters: Name Type Description Default block_hash str None block_number int None ignore_decoding_errors bool False include_author bool False finalized_only bool False Returns: Type Description A dict containing the extrinsic and digest logs data","title":"get_block()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_block_header","text":"Retrieves a block header and decodes its containing log digest items. If block_hash and block_number is omited the chain tip will be retrieve, or the finalized head if finalized_only is set to true. Either block_hash or block_number should be set, or both omitted. See get_block() to also include the extrinsics in the result Parameters: Name Type Description Default block_hash str None block_number int None ignore_decoding_errors bool False include_author bool False finalized_only bool False Returns: Type Description A dict containing the header and digest logs data","title":"get_block_header()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.subscribe_block_headers","text":"Subscribe to new block headers as soon as they are available. The callable subscription_handler will be executed when a new block is available and execution will block until subscription_handler will return a result other than None . Example: 1 2 3 4 5 6 7 8 9 def subscription_handler(obj, update_nr, subscription_id): print(f\"New block #{obj['header']['number']} produced by {obj['header']['author']}\") if update_nr > 10 return {'message': 'Subscription will cancel when a value is returned', 'updates_processed': update_nr} result = substrate.subscribe_block_headers(subscription_handler, include_author=True) Parameters: Name Type Description Default subscription_handler callable required ignore_decoding_errors bool False include_author bool False finalized_only False Returns: Type Description Value return by","title":"subscribe_block_headers()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.retrieve_extrinsic_by_identifier","text":"Retrieve an extrinsic by its identifier in format \"[block_number]-[extrinsic_index]\" e.g. 333456-4 Parameters: Name Type Description Default extrinsic_identifier str required Returns: Type Description ExtrinsicReceipt","title":"retrieve_extrinsic_by_identifier()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.retrieve_extrinsic_by_hash","text":"Retrieve an extrinsic by providing the block_hash and the extrinsic hash Parameters: Name Type Description Default block_hash str required extrinsic_hash str required Returns: Type Description ExtrinsicReceipt","title":"retrieve_extrinsic_by_hash()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_extrinsics","text":"Return extrinsics for given block_hash or block_number Parameters: Name Type Description Default block_hash str None block_number int None","title":"get_extrinsics()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.decode_scale","text":"Helper function to decode arbitrary SCALE-bytes (e.g. 0x02000000) according to given RUST type_string (e.g. BlockNumber). The relevant versioning information of the type (if defined) will be applied if block_hash is set Parameters: Name Type Description Default type_string required scale_bytes required block_hash None return_scale_obj False","title":"decode_scale()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.encode_scale","text":"Helper function to encode arbitrary data into SCALE-bytes for given RUST type_string Parameters: Name Type Description Default type_string required value required block_hash None Returns: Type Description ScaleBytes","title":"encode_scale()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.ss58_encode","text":"Helper function to encode a public key to SS58 address. If no target ss58_format is provided, it will default to the ss58 format of the network it's connected to. Parameters: Name Type Description Default public_key Union [ str , bytes ] required ss58_format int None Returns: Type Description str containing the SS58 address","title":"ss58_encode()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.ss58_decode","text":"Helper function to decode a SS58 address to a public key Parameters: Name Type Description Default ss58_address str required Returns: Type Description str containing the hex representation of the public key","title":"ss58_decode()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.is_valid_ss58_address","text":"Helper function to validate given value as ss58_address for current network/ss58_format Parameters: Name Type Description Default value str required Returns: Type Description bool","title":"is_valid_ss58_address()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.serialize_storage_item","text":"Helper function to serialize a storage item Parameters: Name Type Description Default storage_item required module required spec_version_id required Returns: Type Description dict","title":"serialize_storage_item()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.serialize_constant","text":"Helper function to serialize a constant Parameters: Name Type Description Default constant required module required spec_version_id required Returns: Type Description dict","title":"serialize_constant()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.serialize_module_call","text":"Helper function to serialize a call function Parameters: Name Type Description Default module required call required spec_version required call_index None Returns: Type Description dict","title":"serialize_module_call()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.serialize_module_event","text":"Helper function to serialize an event Parameters: Name Type Description Default module required event required spec_version required event_index required Returns: Type Description dict","title":"serialize_module_event()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.serialize_module_error","text":"Helper function to serialize an error Parameters: Name Type Description Default module required error required spec_version required Returns: Type Description dict","title":"serialize_module_error()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.reload_type_registry","text":"Reload type registry and preset used to instantiate the SubtrateInterface object. Useful to periodically apply changes in type definitions when a runtime upgrade occurred Parameters: Name Type Description Default use_remote_preset bool True auto_discover bool True","title":"reload_type_registry()"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.register_extension","text":"Register an Extension and adds its functionality to the ExtensionRegistry Parameters: Name Type Description Default extension Extension required","title":"register_extension()"},{"location":"reference/base/#substrateinterface.base.ExtrinsicReceipt","text":"Object containing information of submitted extrinsic. Block hash where extrinsic is included is required when retrieving triggered events or determine if extrinsic was succesfull","title":"ExtrinsicReceipt"},{"location":"reference/base/#substrateinterface.base.ExtrinsicReceipt.extrinsic_idx","text":"Retrieves the index of this extrinsic in containing block Returns: Type Description int","title":"extrinsic_idx"},{"location":"reference/base/#substrateinterface.base.ExtrinsicReceipt.extrinsic","text":"Retrieves the Extrinsic subject of this receipt Returns: Type Description Extrinsic","title":"extrinsic"},{"location":"reference/base/#substrateinterface.base.ExtrinsicReceipt.triggered_events","text":"Gets triggered events for submitted extrinsic. block_hash where extrinsic is included is required, manually set block_hash or use wait_for_inclusion when submitting extrinsic Returns: Type Description list","title":"triggered_events"},{"location":"reference/base/#substrateinterface.base.ExtrinsicReceipt.is_success","text":"Returns True if ExtrinsicSuccess event is triggered, False in case of ExtrinsicFailed In case of False error_message will contain more details about the error Returns: Type Description bool","title":"is_success"},{"location":"reference/base/#substrateinterface.base.ExtrinsicReceipt.error_message","text":"Returns the error message if the extrinsic failed in format e.g.: {'type': 'System', 'name': 'BadOrigin', 'docs': 'Bad origin'} Returns: Type Description dict","title":"error_message"},{"location":"reference/base/#substrateinterface.base.ExtrinsicReceipt.weight","text":"Contains the actual weight when executing this extrinsic Returns: Type Description int (WeightV1) or dict (WeightV2)","title":"weight"},{"location":"reference/base/#substrateinterface.base.ExtrinsicReceipt.total_fee_amount","text":"Contains the total fee costs deducted when executing this extrinsic. This includes fee for the validator ( ( Balances.Deposit event) and the fee deposited for the treasury ( Treasury.Deposit event) Returns: Type Description int","title":"total_fee_amount"},{"location":"reference/base/#substrateinterface.base.ExtrinsicReceipt.__init__","text":"Object containing information of submitted extrinsic. Block hash where extrinsic is included is required when retrieving triggered events or determine if extrinsic was succesfull Parameters: Name Type Description Default substrate SubstrateInterface required extrinsic_hash str None block_hash str None finalized None","title":"__init__()"},{"location":"reference/base/#substrateinterface.base.ExtrinsicReceipt.get_extrinsic_identifier","text":"Returns the on-chain identifier for this extrinsic in format \"[block_number]-[extrinsic_idx]\" e.g. 134324-2 Returns: Type Description str","title":"get_extrinsic_identifier()"},{"location":"reference/base/#substrateinterface.base.ExtrinsicReceipt.create_from_extrinsic_identifier","text":"Create an ExtrinsicReceipt with on-chain identifier for this extrinsic in format \"[block_number]-[extrinsic_idx]\" e.g. 134324-2 Parameters: Name Type Description Default substrate SubstrateInterface required extrinsic_identifier str required Returns: Type Description ExtrinsicReceipt","title":"create_from_extrinsic_identifier()"},{"location":"reference/base/#substrateinterface.base.ExtrinsicReceipt.__get_extrinsic_index","text":"Returns the index of a provided extrinsic","title":"__get_extrinsic_index()"},{"location":"reference/contracts/","text":"ContractMetadata \u00b6 __init__ ( metadata_dict : dict , substrate : SubstrateInterface ) \u00b6 Class using the generated metadata.json file to represent the metadata of a contract. The metadata_dict is parsed and the used types are extracted, composed and added to the type registry of the runtime Parameters: Name Type Description Default metadata_dict dict required substrate SubstrateInterface required create_from_file ( metadata_file : str , substrate : SubstrateInterface ) -> ContractMetadata classmethod \u00b6 Create a new ContractMetadata object using the provided metadata_file, usually generated by the command \"cargo +nightly contract generate-metadata\" in an ink! project Parameters: Name Type Description Default metadata_file str required substrate SubstrateInterface required Returns: Type Description ContractMetadata generate_constructor_data ( name , args : dict = None ) -> ScaleBytes \u00b6 Compose the data field used in the \"Contracts.instantiate\" call, finding the selectors and encoded the args of given constructor Parameters: Name Type Description Default name required args dict None Returns: Type Description ScaleBytes get_type_string_for_metadata_type ( type_id : int ) -> str \u00b6 Adds a type included in the metadata (represented by an index in the type list) to the type registry and produces a type string that can be used in the scope of the RuntimeConfigurationObject . Parameters: Name Type Description Default type_id int required Returns: Type Description str generate_message_data ( name , args : dict = None ) -> ScaleBytes \u00b6 Compose the data field used in the \"Contracts.call\" call, finding the selector and encoded the args of provided message name Parameters: Name Type Description Default name required args dict None Returns: Type Description ScaleBytes get_event_data ( event_id : int ) -> dict \u00b6 Looks up the event data for given 0-based event_id Parameters: Name Type Description Default event_id int required ContractEvent \u00b6 Bases: ScaleType __init__ ( * args , contract_metadata : ContractMetadata = None , ** kwargs ) \u00b6 ScaleType class containing information about a specific Contract Event, it decodes the \"data\" field in the generic \"Contracts.ContractExecution\" event that is triggered after a successfull \"Contracts.call\" call. ContractExecutionReceipt \u00b6 Bases: ExtrinsicReceipt __init__ ( * args , ** kwargs ) \u00b6 Object extending the ExtrinsicReceipt containing more information about the result after submitting a \"Contracts.call\" extrinsic. Parameters: Name Type Description Default args () kwargs {} create_from_extrinsic_receipt ( receipt : ExtrinsicReceipt , contract_metadata : ContractMetadata ) -> ContractExecutionReceipt classmethod \u00b6 Promotes a ExtrinsicReceipt object to a ContractExecutionReceipt. It uses the provided ContractMetadata to decode \"ContractExecution\" events Parameters: Name Type Description Default receipt ExtrinsicReceipt required contract_metadata ContractMetadata required Returns: Type Description ContractExecutionReceipt ContractCode \u00b6 __init__ ( code_hash : bytes = None , metadata : ContractMetadata = None , wasm_bytes : bytes = None , substrate : SubstrateInterface = None ) \u00b6 Object representing the blueprint of the contract, combining either the code hash and metadata of a contract, or the WASM bytes and metadata Parameters: Name Type Description Default code_hash bytes None metadata ContractMetadata None wasm_bytes bytes None substrate SubstrateInterface None create_from_contract_files ( wasm_file : str , metadata_file : str , substrate : SubstrateInterface ) -> ContractCode classmethod \u00b6 Create a ContractCode providing paths for the WASM binary file and metadata JSON file generated by the ink! project Parameters: Name Type Description Default wasm_file str required metadata_file str required substrate SubstrateInterface required Returns: Type Description ContractCode create_from_code_hash ( code_hash : bytes , metadata_file : str , substrate : SubstrateInterface ) -> ContractCode classmethod \u00b6 Create a ContractCode providing an existing contract code hash and a path to the metadata JSON file Parameters: Name Type Description Default code_hash bytes required metadata_file str required substrate SubstrateInterface required Returns: Type Description ContractCode upload_wasm ( keypair : Keypair , storage_deposit_limit : int = None ) -> ExtrinsicReceipt \u00b6 Created and submits an \"Contracts.upload_code\" extrinsic containing the WASM binary Parameters: Name Type Description Default keypair Keypair required storage_deposit_limit int None Returns: Type Description ExtrinsicReceipt deploy ( keypair : Keypair , endowment : int , gas_limit : int , constructor : str , args : dict = None , deployment_salt : str = None , upload_code : bool = False , storage_deposit_limit : int = None ) -> ContractInstance \u00b6 Deploys a new instance of the contract after it has been uploaded on-chain, with provided constructor and constructor arguments Parameters: Name Type Description Default keypair Keypair required endowment int required gas_limit int required constructor str required args dict None deployment_salt str None upload_code bool False storage_deposit_limit int None Returns: Type Description ContractInstance ContractInstance \u00b6 create_from_address ( contract_address : str , metadata_file : str , substrate : SubstrateInterface = None ) -> ContractInstance classmethod \u00b6 Create a ContractInstance object that already exists on-chain providing a SS58-address and the path to the metadata JSON of that contract Parameters: Name Type Description Default contract_address str required metadata_file str required substrate SubstrateInterface None Returns: Type Description ContractInstance read ( keypair : Keypair , method : str , args : dict = None , value : int = 0 , gas_limit : int = None ) -> GenericContractExecResult \u00b6 Used to execute non-mutable messages to for example read data from the contract using getters. Can also be used to predict gas limits and 'dry-run' the execution when a mutable message is used. This method does not submit an extrinsic. Parameters: Name Type Description Default keypair Keypair required method str required args dict None value int 0 gas_limit int None Returns: Type Description GenericContractExecResult exec ( keypair : Keypair , method : str , args : dict = None , value : int = 0 , gas_limit : Optional [ int ] = None , storage_deposit_limit : int = None ) -> ContractExecutionReceipt \u00b6 Executes provided message by creating and submitting an extrinsic. To get a gas prediction or perform a 'dry-run' of executing this message, see ContractInstance.read . Parameters: Name Type Description Default keypair Keypair required method str required args dict None value int 0 gas_limit Optional [ int ] None storage_deposit_limit int None Returns: Type Description ContractExecutionReceipt","title":"Contracts"},{"location":"reference/contracts/#substrateinterface.contracts.ContractMetadata","text":"","title":"ContractMetadata"},{"location":"reference/contracts/#substrateinterface.contracts.ContractMetadata.__init__","text":"Class using the generated metadata.json file to represent the metadata of a contract. The metadata_dict is parsed and the used types are extracted, composed and added to the type registry of the runtime Parameters: Name Type Description Default metadata_dict dict required substrate SubstrateInterface required","title":"__init__()"},{"location":"reference/contracts/#substrateinterface.contracts.ContractMetadata.create_from_file","text":"Create a new ContractMetadata object using the provided metadata_file, usually generated by the command \"cargo +nightly contract generate-metadata\" in an ink! project Parameters: Name Type Description Default metadata_file str required substrate SubstrateInterface required Returns: Type Description ContractMetadata","title":"create_from_file()"},{"location":"reference/contracts/#substrateinterface.contracts.ContractMetadata.generate_constructor_data","text":"Compose the data field used in the \"Contracts.instantiate\" call, finding the selectors and encoded the args of given constructor Parameters: Name Type Description Default name required args dict None Returns: Type Description ScaleBytes","title":"generate_constructor_data()"},{"location":"reference/contracts/#substrateinterface.contracts.ContractMetadata.get_type_string_for_metadata_type","text":"Adds a type included in the metadata (represented by an index in the type list) to the type registry and produces a type string that can be used in the scope of the RuntimeConfigurationObject . Parameters: Name Type Description Default type_id int required Returns: Type Description str","title":"get_type_string_for_metadata_type()"},{"location":"reference/contracts/#substrateinterface.contracts.ContractMetadata.generate_message_data","text":"Compose the data field used in the \"Contracts.call\" call, finding the selector and encoded the args of provided message name Parameters: Name Type Description Default name required args dict None Returns: Type Description ScaleBytes","title":"generate_message_data()"},{"location":"reference/contracts/#substrateinterface.contracts.ContractMetadata.get_event_data","text":"Looks up the event data for given 0-based event_id Parameters: Name Type Description Default event_id int required","title":"get_event_data()"},{"location":"reference/contracts/#substrateinterface.contracts.ContractEvent","text":"Bases: ScaleType","title":"ContractEvent"},{"location":"reference/contracts/#substrateinterface.contracts.ContractEvent.__init__","text":"ScaleType class containing information about a specific Contract Event, it decodes the \"data\" field in the generic \"Contracts.ContractExecution\" event that is triggered after a successfull \"Contracts.call\" call.","title":"__init__()"},{"location":"reference/contracts/#substrateinterface.contracts.ContractExecutionReceipt","text":"Bases: ExtrinsicReceipt","title":"ContractExecutionReceipt"},{"location":"reference/contracts/#substrateinterface.contracts.ContractExecutionReceipt.__init__","text":"Object extending the ExtrinsicReceipt containing more information about the result after submitting a \"Contracts.call\" extrinsic. Parameters: Name Type Description Default args () kwargs {}","title":"__init__()"},{"location":"reference/contracts/#substrateinterface.contracts.ContractExecutionReceipt.create_from_extrinsic_receipt","text":"Promotes a ExtrinsicReceipt object to a ContractExecutionReceipt. It uses the provided ContractMetadata to decode \"ContractExecution\" events Parameters: Name Type Description Default receipt ExtrinsicReceipt required contract_metadata ContractMetadata required Returns: Type Description ContractExecutionReceipt","title":"create_from_extrinsic_receipt()"},{"location":"reference/contracts/#substrateinterface.contracts.ContractCode","text":"","title":"ContractCode"},{"location":"reference/contracts/#substrateinterface.contracts.ContractCode.__init__","text":"Object representing the blueprint of the contract, combining either the code hash and metadata of a contract, or the WASM bytes and metadata Parameters: Name Type Description Default code_hash bytes None metadata ContractMetadata None wasm_bytes bytes None substrate SubstrateInterface None","title":"__init__()"},{"location":"reference/contracts/#substrateinterface.contracts.ContractCode.create_from_contract_files","text":"Create a ContractCode providing paths for the WASM binary file and metadata JSON file generated by the ink! project Parameters: Name Type Description Default wasm_file str required metadata_file str required substrate SubstrateInterface required Returns: Type Description ContractCode","title":"create_from_contract_files()"},{"location":"reference/contracts/#substrateinterface.contracts.ContractCode.create_from_code_hash","text":"Create a ContractCode providing an existing contract code hash and a path to the metadata JSON file Parameters: Name Type Description Default code_hash bytes required metadata_file str required substrate SubstrateInterface required Returns: Type Description ContractCode","title":"create_from_code_hash()"},{"location":"reference/contracts/#substrateinterface.contracts.ContractCode.upload_wasm","text":"Created and submits an \"Contracts.upload_code\" extrinsic containing the WASM binary Parameters: Name Type Description Default keypair Keypair required storage_deposit_limit int None Returns: Type Description ExtrinsicReceipt","title":"upload_wasm()"},{"location":"reference/contracts/#substrateinterface.contracts.ContractCode.deploy","text":"Deploys a new instance of the contract after it has been uploaded on-chain, with provided constructor and constructor arguments Parameters: Name Type Description Default keypair Keypair required endowment int required gas_limit int required constructor str required args dict None deployment_salt str None upload_code bool False storage_deposit_limit int None Returns: Type Description ContractInstance","title":"deploy()"},{"location":"reference/contracts/#substrateinterface.contracts.ContractInstance","text":"","title":"ContractInstance"},{"location":"reference/contracts/#substrateinterface.contracts.ContractInstance.create_from_address","text":"Create a ContractInstance object that already exists on-chain providing a SS58-address and the path to the metadata JSON of that contract Parameters: Name Type Description Default contract_address str required metadata_file str required substrate SubstrateInterface None Returns: Type Description ContractInstance","title":"create_from_address()"},{"location":"reference/contracts/#substrateinterface.contracts.ContractInstance.read","text":"Used to execute non-mutable messages to for example read data from the contract using getters. Can also be used to predict gas limits and 'dry-run' the execution when a mutable message is used. This method does not submit an extrinsic. Parameters: Name Type Description Default keypair Keypair required method str required args dict None value int 0 gas_limit int None Returns: Type Description GenericContractExecResult","title":"read()"},{"location":"reference/contracts/#substrateinterface.contracts.ContractInstance.exec","text":"Executes provided message by creating and submitting an extrinsic. To get a gas prediction or perform a 'dry-run' of executing this message, see ContractInstance.read . Parameters: Name Type Description Default keypair Keypair required method str required args dict None value int 0 gas_limit Optional [ int ] None storage_deposit_limit int None Returns: Type Description ContractExecutionReceipt","title":"exec()"},{"location":"reference/extensions/","text":"Extension \u00b6 Base class of all extensions init ( substrate : SubstrateInterface ) \u00b6 Initialization process of the extension. This function is being called by the ExtensionRegistry. Parameters: Name Type Description Default substrate SubstrateInterface required close () \u00b6 Cleanup process of the extension. This function is being called by the ExtensionRegistry. debug_message ( message : str ) \u00b6 Submits a debug message in the logger Parameters: Name Type Description Default message str required SearchExtension \u00b6 Bases: Extension Type of Extension that implements functionality to improve and enhance search capability filter_events ( ** kwargs ) -> list \u00b6 Filters events to match provided search criteria e.g. block range, pallet name, accountID in attributes Parameters: Name Type Description Default kwargs {} Returns: Type Description list filter_extrinsics ( ** kwargs ) -> list \u00b6 Filters extrinsics to match provided search criteria e.g. block range, pallet name, signed by accountID Parameters: Name Type Description Default kwargs {} search_block_number ( block_datetime : datetime , block_time : int = 6 , ** kwargs ) -> int \u00b6 Search corresponding block number for provided block_datetime . the prediction tolerance is provided with block_time Parameters: Name Type Description Default block_datetime datetime required block_time int 6 kwargs {} Returns: Type Description int get_block_timestamp ( block_number : int ) -> int \u00b6 Return a UNIX timestamp for given block_number . Parameters: Name Type Description Default block_number int required Returns: Type Description int SubstrateNodeSearchExtension \u00b6 Bases: SearchExtension Implementation of SearchExtension using only Substrate RPC methods. Could be significant inefficient. search_block_number ( block_datetime : datetime , block_time : int = 6 , ** kwargs ) -> int \u00b6 Search corresponding block number for provided block_datetime . the prediction tolerance is provided with block_time Parameters: Name Type Description Default block_datetime datetime required block_time int 6 kwargs {} Returns: Type Description int","title":"Extensions"},{"location":"reference/extensions/#substrateinterface.extensions.Extension","text":"Base class of all extensions","title":"Extension"},{"location":"reference/extensions/#substrateinterface.extensions.Extension.init","text":"Initialization process of the extension. This function is being called by the ExtensionRegistry. Parameters: Name Type Description Default substrate SubstrateInterface required","title":"init()"},{"location":"reference/extensions/#substrateinterface.extensions.Extension.close","text":"Cleanup process of the extension. This function is being called by the ExtensionRegistry.","title":"close()"},{"location":"reference/extensions/#substrateinterface.extensions.Extension.debug_message","text":"Submits a debug message in the logger Parameters: Name Type Description Default message str required","title":"debug_message()"},{"location":"reference/extensions/#substrateinterface.extensions.SearchExtension","text":"Bases: Extension Type of Extension that implements functionality to improve and enhance search capability","title":"SearchExtension"},{"location":"reference/extensions/#substrateinterface.extensions.SearchExtension.filter_events","text":"Filters events to match provided search criteria e.g. block range, pallet name, accountID in attributes Parameters: Name Type Description Default kwargs {} Returns: Type Description list","title":"filter_events()"},{"location":"reference/extensions/#substrateinterface.extensions.SearchExtension.filter_extrinsics","text":"Filters extrinsics to match provided search criteria e.g. block range, pallet name, signed by accountID Parameters: Name Type Description Default kwargs {}","title":"filter_extrinsics()"},{"location":"reference/extensions/#substrateinterface.extensions.SearchExtension.search_block_number","text":"Search corresponding block number for provided block_datetime . the prediction tolerance is provided with block_time Parameters: Name Type Description Default block_datetime datetime required block_time int 6 kwargs {} Returns: Type Description int","title":"search_block_number()"},{"location":"reference/extensions/#substrateinterface.extensions.SearchExtension.get_block_timestamp","text":"Return a UNIX timestamp for given block_number . Parameters: Name Type Description Default block_number int required Returns: Type Description int","title":"get_block_timestamp()"},{"location":"reference/extensions/#substrateinterface.extensions.SubstrateNodeSearchExtension","text":"Bases: SearchExtension Implementation of SearchExtension using only Substrate RPC methods. Could be significant inefficient.","title":"SubstrateNodeSearchExtension"},{"location":"reference/extensions/#substrateinterface.extensions.SubstrateNodeSearchExtension.search_block_number","text":"Search corresponding block number for provided block_datetime . the prediction tolerance is provided with block_time Parameters: Name Type Description Default block_datetime datetime required block_time int 6 kwargs {} Returns: Type Description int","title":"search_block_number()"},{"location":"reference/interfaces/","text":"ExtensionInterface \u00b6 Keeps tracks of active extensions and which calls can be made register ( extension : Extension ) \u00b6 Register an extension instance to the registry and calls initialization Parameters: Name Type Description Default extension Extension required unregister_all () \u00b6 Unregister all extensions and free used resources and connections call ( name : str , * args , ** kwargs ) \u00b6 Tries to call extension function with name and provided args and kwargs Will raise a ExtensionCallNotFound when no method is found in current extensions Parameters: Name Type Description Default name str required args () kwargs {}","title":"Interfaces"},{"location":"reference/interfaces/#substrateinterface.interfaces.ExtensionInterface","text":"Keeps tracks of active extensions and which calls can be made","title":"ExtensionInterface"},{"location":"reference/interfaces/#substrateinterface.interfaces.ExtensionInterface.register","text":"Register an extension instance to the registry and calls initialization Parameters: Name Type Description Default extension Extension required","title":"register()"},{"location":"reference/interfaces/#substrateinterface.interfaces.ExtensionInterface.unregister_all","text":"Unregister all extensions and free used resources and connections","title":"unregister_all()"},{"location":"reference/interfaces/#substrateinterface.interfaces.ExtensionInterface.call","text":"Tries to call extension function with name and provided args and kwargs Will raise a ExtensionCallNotFound when no method is found in current extensions Parameters: Name Type Description Default name str required args () kwargs {}","title":"call()"},{"location":"reference/keypair/","text":"KeypairType \u00b6 Type of cryptography, used in Keypair instance to encrypt and sign data ED25519 = 0 SR25519 = 1 ECDSA = 2 MnemonicLanguageCode \u00b6 Available language codes to generate mnemonics ENGLISH = 'en' CHINESE_SIMPLIFIED = 'zh-hans' CHINESE_TRADITIONAL = 'zh-hant' FRENCH = 'fr' ITALIAN = 'it' JAPANESE = 'ja' KOREAN = 'ko' SPANISH = 'es' Keypair \u00b6 __init__ ( ss58_address : str = None , public_key : Union [ bytes , str ] = None , private_key : Union [ bytes , str ] = None , ss58_format : int = None , seed_hex : Union [ str , bytes ] = None , crypto_type : int = KeypairType . SR25519 ) \u00b6 Allows generation of Keypairs from a variety of input combination, such as a public/private key combination, mnemonic or URI containing soft and hard derivation paths. With these Keypairs data can be signed and verified Parameters: Name Type Description Default ss58_address str None public_key Union [ bytes , str ] None private_key Union [ bytes , str ] None ss58_format int None seed_hex Union [ str , bytes ] None crypto_type int KeypairType.SR25519 generate_mnemonic ( words : int = 12 , language_code : str = MnemonicLanguageCode . ENGLISH ) -> str classmethod \u00b6 Generates a new seed phrase with given amount of words (default 12) Parameters: Name Type Description Default words int 12 language_code str MnemonicLanguageCode.ENGLISH Returns: Name Type Description str Seed phrase validate_mnemonic ( mnemonic : str , language_code : str = MnemonicLanguageCode . ENGLISH ) -> bool classmethod \u00b6 Verify if specified mnemonic is valid Parameters: Name Type Description Default mnemonic str required language_code str MnemonicLanguageCode.ENGLISH Returns: Type Description bool create_from_mnemonic ( mnemonic : str , ss58_format = 42 , crypto_type = KeypairType . SR25519 , language_code : str = MnemonicLanguageCode . ENGLISH ) -> Keypair classmethod \u00b6 Create a Keypair for given memonic Parameters: Name Type Description Default mnemonic str required ss58_format 42 crypto_type KeypairType.SR25519 language_code str MnemonicLanguageCode.ENGLISH Returns: Type Description Keypair create_from_seed ( seed_hex : Union [ bytes , str ], ss58_format : Optional [ int ] = 42 , crypto_type = KeypairType . SR25519 ) -> Keypair classmethod \u00b6 Create a Keypair for given seed Parameters: Name Type Description Default seed_hex Union [ bytes , str ] required ss58_format Optional [ int ] 42 crypto_type KeypairType.SR25519 Returns: Type Description Keypair create_from_uri ( suri : str , ss58_format : Optional [ int ] = 42 , crypto_type = KeypairType . SR25519 , language_code : str = MnemonicLanguageCode . ENGLISH ) -> Keypair classmethod \u00b6 Creates Keypair for specified suri in following format: [mnemonic]/[soft-path]//[hard-path] Parameters: Name Type Description Default suri str required ss58_format Optional [ int ] 42 crypto_type KeypairType.SR25519 language_code str MnemonicLanguageCode.ENGLISH Returns: Type Description Keypair create_from_private_key ( private_key : Union [ bytes , str ], public_key : Union [ bytes , str ] = None , ss58_address : str = None , ss58_format : int = None , crypto_type : int = KeypairType . SR25519 ) -> Keypair classmethod \u00b6 Creates Keypair for specified public/private keys Parameters: Name Type Description Default private_key Union [ bytes , str ] required public_key Union [ bytes , str ] None ss58_address str None ss58_format int None crypto_type int KeypairType.SR25519 Returns: Type Description Keypair create_from_encrypted_json ( json_data : Union [ str , dict ], passphrase : str , ss58_format : int = None ) -> Keypair classmethod \u00b6 Create a Keypair from a PolkadotJS format encrypted JSON file Parameters: Name Type Description Default json_data Union [ str , dict ] required passphrase str required ss58_format int None Returns: Type Description Keypair export_to_encrypted_json ( passphrase : str , name : str = None ) -> dict \u00b6 Export Keypair to PolkadotJS format encrypted JSON file Parameters: Name Type Description Default passphrase str required name str None Returns: Type Description dict sign ( data : Union [ ScaleBytes , bytes , str ]) -> bytes \u00b6 Creates a signature for given data Parameters: Name Type Description Default data Union [ ScaleBytes , bytes , str ] required Returns: Type Description signature in bytes verify ( data : Union [ ScaleBytes , bytes , str ], signature : Union [ bytes , str ]) -> bool \u00b6 Verifies data with specified signature Parameters: Name Type Description Default data Union [ ScaleBytes , bytes , str ] required signature Union [ bytes , str ] required Returns: Type Description True if data is signed with this Keypair, otherwise False encrypt_message ( message : Union [ bytes , str ], recipient_public_key : bytes , nonce : bytes = secrets . token_bytes ( 24 )) -> bytes \u00b6 Encrypts message with for specified recipient Parameters: Name Type Description Default message Union [ bytes , str ] required recipient_public_key bytes required nonce bytes secrets.token_bytes(24) Returns: Type Description Encrypted message decrypt_message ( encrypted_message_with_nonce : bytes , sender_public_key : bytes ) -> bytes \u00b6 Decrypts message from a specified sender Parameters: Name Type Description Default encrypted_message_with_nonce bytes required sender_public_key bytes required Returns: Type Description Decrypted message","title":"Keypair"},{"location":"reference/keypair/#substrateinterface.keypair.KeypairType","text":"Type of cryptography, used in Keypair instance to encrypt and sign data ED25519 = 0 SR25519 = 1 ECDSA = 2","title":"KeypairType"},{"location":"reference/keypair/#substrateinterface.keypair.MnemonicLanguageCode","text":"Available language codes to generate mnemonics ENGLISH = 'en' CHINESE_SIMPLIFIED = 'zh-hans' CHINESE_TRADITIONAL = 'zh-hant' FRENCH = 'fr' ITALIAN = 'it' JAPANESE = 'ja' KOREAN = 'ko' SPANISH = 'es'","title":"MnemonicLanguageCode"},{"location":"reference/keypair/#substrateinterface.keypair.Keypair","text":"","title":"Keypair"},{"location":"reference/keypair/#substrateinterface.keypair.Keypair.__init__","text":"Allows generation of Keypairs from a variety of input combination, such as a public/private key combination, mnemonic or URI containing soft and hard derivation paths. With these Keypairs data can be signed and verified Parameters: Name Type Description Default ss58_address str None public_key Union [ bytes , str ] None private_key Union [ bytes , str ] None ss58_format int None seed_hex Union [ str , bytes ] None crypto_type int KeypairType.SR25519","title":"__init__()"},{"location":"reference/keypair/#substrateinterface.keypair.Keypair.generate_mnemonic","text":"Generates a new seed phrase with given amount of words (default 12) Parameters: Name Type Description Default words int 12 language_code str MnemonicLanguageCode.ENGLISH Returns: Name Type Description str Seed phrase","title":"generate_mnemonic()"},{"location":"reference/keypair/#substrateinterface.keypair.Keypair.validate_mnemonic","text":"Verify if specified mnemonic is valid Parameters: Name Type Description Default mnemonic str required language_code str MnemonicLanguageCode.ENGLISH Returns: Type Description bool","title":"validate_mnemonic()"},{"location":"reference/keypair/#substrateinterface.keypair.Keypair.create_from_mnemonic","text":"Create a Keypair for given memonic Parameters: Name Type Description Default mnemonic str required ss58_format 42 crypto_type KeypairType.SR25519 language_code str MnemonicLanguageCode.ENGLISH Returns: Type Description Keypair","title":"create_from_mnemonic()"},{"location":"reference/keypair/#substrateinterface.keypair.Keypair.create_from_seed","text":"Create a Keypair for given seed Parameters: Name Type Description Default seed_hex Union [ bytes , str ] required ss58_format Optional [ int ] 42 crypto_type KeypairType.SR25519 Returns: Type Description Keypair","title":"create_from_seed()"},{"location":"reference/keypair/#substrateinterface.keypair.Keypair.create_from_uri","text":"Creates Keypair for specified suri in following format: [mnemonic]/[soft-path]//[hard-path] Parameters: Name Type Description Default suri str required ss58_format Optional [ int ] 42 crypto_type KeypairType.SR25519 language_code str MnemonicLanguageCode.ENGLISH Returns: Type Description Keypair","title":"create_from_uri()"},{"location":"reference/keypair/#substrateinterface.keypair.Keypair.create_from_private_key","text":"Creates Keypair for specified public/private keys Parameters: Name Type Description Default private_key Union [ bytes , str ] required public_key Union [ bytes , str ] None ss58_address str None ss58_format int None crypto_type int KeypairType.SR25519 Returns: Type Description Keypair","title":"create_from_private_key()"},{"location":"reference/keypair/#substrateinterface.keypair.Keypair.create_from_encrypted_json","text":"Create a Keypair from a PolkadotJS format encrypted JSON file Parameters: Name Type Description Default json_data Union [ str , dict ] required passphrase str required ss58_format int None Returns: Type Description Keypair","title":"create_from_encrypted_json()"},{"location":"reference/keypair/#substrateinterface.keypair.Keypair.export_to_encrypted_json","text":"Export Keypair to PolkadotJS format encrypted JSON file Parameters: Name Type Description Default passphrase str required name str None Returns: Type Description dict","title":"export_to_encrypted_json()"},{"location":"reference/keypair/#substrateinterface.keypair.Keypair.sign","text":"Creates a signature for given data Parameters: Name Type Description Default data Union [ ScaleBytes , bytes , str ] required Returns: Type Description signature in bytes","title":"sign()"},{"location":"reference/keypair/#substrateinterface.keypair.Keypair.verify","text":"Verifies data with specified signature Parameters: Name Type Description Default data Union [ ScaleBytes , bytes , str ] required signature Union [ bytes , str ] required Returns: Type Description True if data is signed with this Keypair, otherwise False","title":"verify()"},{"location":"reference/keypair/#substrateinterface.keypair.Keypair.encrypt_message","text":"Encrypts message with for specified recipient Parameters: Name Type Description Default message Union [ bytes , str ] required recipient_public_key bytes required nonce bytes secrets.token_bytes(24) Returns: Type Description Encrypted message","title":"encrypt_message()"},{"location":"reference/keypair/#substrateinterface.keypair.Keypair.decrypt_message","text":"Decrypts message from a specified sender Parameters: Name Type Description Default encrypted_message_with_nonce bytes required sender_public_key bytes required Returns: Type Description Decrypted message","title":"decrypt_message()"},{"location":"reference/storage/","text":"StorageKey \u00b6 A StorageKey instance is a representation of a single state entry. Substrate uses a simple key-value data store implemented as a database-backed, modified Merkle tree. All of Substrate's higher-level storage abstractions are built on top of this simple key-value store. create_from_data ( data : bytes , runtime_config : RuntimeConfigurationObject , metadata : GenericMetadataVersioned , value_scale_type : str = None , pallet : str = None , storage_function : str = None ) -> StorageKey classmethod \u00b6 Create a StorageKey instance providing raw storage key bytes Parameters: Name Type Description Default data bytes required runtime_config RuntimeConfigurationObject required metadata GenericMetadataVersioned required value_scale_type str None pallet str None storage_function str None Returns: Type Description StorageKey create_from_storage_function ( pallet : str , storage_function : str , params : list , runtime_config : RuntimeConfigurationObject , metadata : GenericMetadataVersioned ) -> StorageKey classmethod \u00b6 Create a StorageKey instance providing storage function details Parameters: Name Type Description Default pallet str required storage_function str required params list required runtime_config RuntimeConfigurationObject required metadata GenericMetadataVersioned required Returns: Type Description StorageKey to_hex () -> str \u00b6 Returns a Hex-string representation of current StorageKey data Returns: Type Description str Hex string generate () -> bytes \u00b6 Generate a storage key for current specified pallet/function/params Returns: Type Description bytes","title":"Storage"},{"location":"reference/storage/#substrateinterface.storage.StorageKey","text":"A StorageKey instance is a representation of a single state entry. Substrate uses a simple key-value data store implemented as a database-backed, modified Merkle tree. All of Substrate's higher-level storage abstractions are built on top of this simple key-value store.","title":"StorageKey"},{"location":"reference/storage/#substrateinterface.storage.StorageKey.create_from_data","text":"Create a StorageKey instance providing raw storage key bytes Parameters: Name Type Description Default data bytes required runtime_config RuntimeConfigurationObject required metadata GenericMetadataVersioned required value_scale_type str None pallet str None storage_function str None Returns: Type Description StorageKey","title":"create_from_data()"},{"location":"reference/storage/#substrateinterface.storage.StorageKey.create_from_storage_function","text":"Create a StorageKey instance providing storage function details Parameters: Name Type Description Default pallet str required storage_function str required params list required runtime_config RuntimeConfigurationObject required metadata GenericMetadataVersioned required Returns: Type Description StorageKey","title":"create_from_storage_function()"},{"location":"reference/storage/#substrateinterface.storage.StorageKey.to_hex","text":"Returns a Hex-string representation of current StorageKey data Returns: Type Description str Hex string","title":"to_hex()"},{"location":"reference/storage/#substrateinterface.storage.StorageKey.generate","text":"Generate a storage key for current specified pallet/function/params Returns: Type Description bytes","title":"generate()"},{"location":"usage/call-runtime-apis/","text":"Call runtime APIs \u00b6 Each Substrate node contains a runtime. The runtime contains the business logic of the chain. It defines what transactions are valid and invalid and determines how the chain's state changes in response to transactions. A Runtime API facilitates this kind of communication between the outer node and the runtime. More information about Runtime APIs Example \u00b6 1 2 result = substrate . runtime_call ( \"AccountNonceApi\" , \"account_nonce\" , [ \"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\" ]) # <U32(value=2)> List of available runtime APIs and methods \u00b6 1 2 3 4 5 runtime_calls = substrate . get_metadata_runtime_call_functions () #[ # <RuntimeCallDefinition(value={'description': 'The API to query account nonce (aka transaction index)', 'params': [{'name': 'account_id', 'type': 'AccountId'}], 'type': 'Index', 'api': 'AccountNonceApi', 'method': 'account_nonce'})> # ... #] Get param type decomposition \u00b6 A helper function to compose the parameters for this runtime API call 1 2 3 runtime_call = substrate . get_metadata_runtime_call_function ( \"ContractsApi\" , \"call\" ) param_info = runtime_call . get_param_info () # ['AccountId', 'AccountId', 'u128', 'u64', (None, 'u128'), 'Bytes']","title":"Call runtime APIs"},{"location":"usage/call-runtime-apis/#call-runtime-apis","text":"Each Substrate node contains a runtime. The runtime contains the business logic of the chain. It defines what transactions are valid and invalid and determines how the chain's state changes in response to transactions. A Runtime API facilitates this kind of communication between the outer node and the runtime. More information about Runtime APIs","title":"Call runtime APIs"},{"location":"usage/call-runtime-apis/#example","text":"1 2 result = substrate . runtime_call ( \"AccountNonceApi\" , \"account_nonce\" , [ \"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\" ]) # <U32(value=2)>","title":"Example"},{"location":"usage/call-runtime-apis/#list-of-available-runtime-apis-and-methods","text":"1 2 3 4 5 runtime_calls = substrate . get_metadata_runtime_call_functions () #[ # <RuntimeCallDefinition(value={'description': 'The API to query account nonce (aka transaction index)', 'params': [{'name': 'account_id', 'type': 'AccountId'}], 'type': 'Index', 'api': 'AccountNonceApi', 'method': 'account_nonce'})> # ... #]","title":"List of available runtime APIs and methods"},{"location":"usage/call-runtime-apis/#get-param-type-decomposition","text":"A helper function to compose the parameters for this runtime API call 1 2 3 runtime_call = substrate . get_metadata_runtime_call_function ( \"ContractsApi\" , \"call\" ) param_info = runtime_call . get_param_info () # ['AccountId', 'AccountId', 'u128', 'u64', (None, 'u128'), 'Bytes']","title":"Get param type decomposition"},{"location":"usage/cleanup-and-context-manager/","text":"Cleanup and context manager \u00b6 At the end of the lifecycle of a SubstrateInterface instance, calling the close() method will do all the necessary cleanup, like closing the websocket connection. When using the context manager this will be done automatically: 1 2 3 4 with SubstrateInterface ( url = \"wss://rpc.polkadot.io\" ) as substrate : events = substrate . query ( \"System\" , \"Events\" ) # connection is now closed","title":"Cleanup and context manager"},{"location":"usage/cleanup-and-context-manager/#cleanup-and-context-manager","text":"At the end of the lifecycle of a SubstrateInterface instance, calling the close() method will do all the necessary cleanup, like closing the websocket connection. When using the context manager this will be done automatically: 1 2 3 4 with SubstrateInterface ( url = \"wss://rpc.polkadot.io\" ) as substrate : events = substrate . query ( \"System\" , \"Events\" ) # connection is now closed","title":"Cleanup and context manager"},{"location":"usage/creating-extrinsics/","text":"Creating extrinsics \u00b6 In Substrate, transactions are often more broadly referred to as (signed) extrinsics. The term extrinsic is generally used to mean any information that originates outside of the runtime. An extrinsic is basically a vehicle that carries the intention to execute a function call in the runtime, along with proof of the account that wants to execute it. Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 call = substrate . compose_call ( call_module = 'Balances' , call_function = 'transfer' , call_params = { 'dest' : '5E9oDs9PjpsBbxXxRE9uMaZZhnBAV38n2ouLB28oecBDdeQo' , 'value' : 1 * 10 ** 12 } ) extrinsic = substrate . create_signed_extrinsic ( call = call , keypair = keypair ) try : receipt = substrate . submit_extrinsic ( extrinsic , wait_for_inclusion = True ) print ( f \"Extrinsic ' { receipt . extrinsic_hash } ' sent and included in block ' { receipt . block_hash } '\" ) except SubstrateRequestException as e : print ( \"Failed to send: {} \" . format ( e )) The wait_for_inclusion keyword argument used in the example above will block giving the result until it gets confirmation from the node that the extrinsic is succesfully included in a block. The wait_for_finalization keyword will wait until extrinsic is finalized. Note this feature is only available for websocket connections. Extrinsic Receipts \u00b6 The substrate.submit_extrinsic() example above returns an ExtrinsicReceipt object, which contains information about the on-chain execution of the extrinsic. Because the block_hash is necessary to retrieve the triggered events from storage, most information is only available when wait_for_inclusion=True or wait_for_finalization=True is used when submitting an extrinsic. Examples: 1 2 3 4 5 receipt = substrate . submit_extrinsic ( extrinsic , wait_for_inclusion = True ) print ( receipt . is_success ) # False print ( receipt . weight ) # 216625000 print ( receipt . total_fee_amount ) # 2749998966 print ( receipt . error_message [ 'name' ]) # 'LiquidityRestrictions' ExtrinsicReceipt objects can also be created for all existing extrinsics on-chain: 1 2 3 4 5 6 7 8 9 10 11 receipt = substrate . retrieve_extrinsic_by_identifier ( \"5233297-1\" ) print ( receipt . is_success ) # False print ( receipt . extrinsic . call_module . name ) # 'Identity' print ( receipt . extrinsic . call . name ) # 'remove_sub' print ( receipt . weight ) # 359262000 print ( receipt . total_fee_amount ) # 2483332406 print ( receipt . error_message [ 'docs' ]) # [' Sender is not a sub-account.'] for event in receipt . triggered_events : print ( f '* { event . value } ' ) Multisig extrinsics \u00b6 Substrate has the functionality for multi-signature dispatch, allowing multiple signed origins (accounts) to coordinate and dispatch a call, derivable deterministically from the set of account IDs and the threshold number of accounts from the set that must approve it. To initiate and finalize multisig extrinsics, the following helper functions are available: Define the multisig account by supplying its signatories and threshold: 1 2 3 4 5 6 7 8 9 10 keypair_alice = Keypair . create_from_uri ( '//Alice' , ss58_format = substrate . ss58_format ) multisig_account = substrate . generate_multisig_account ( signatories = [ keypair_alice . ss58_address , '5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty' , '5FLSigC9HGRKVhB9FiEo4Y3koPsNmBmLJbpXg2mp1hXcS59Y' ], threshold = 2 ) Then initiate the multisig extrinsic by providing the call and a keypair of one of its signatories: 1 2 3 4 5 6 7 8 9 10 call = substrate . compose_call ( call_module = 'System' , call_function = 'remark_with_event' , call_params = { 'remark' : 'Multisig test' } ) extrinsic = substrate . create_multisig_extrinsic ( call , keypair_alice , multisig_account , era = { 'period' : 64 }) receipt = substrate . submit_extrinsic ( extrinsic , wait_for_inclusion = True ) Then a second signatory approves and finalizes the call by providing the same call to another multisig extrinsic: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Define the multisig account by supplying its signatories and threshold keypair_charlie = Keypair . create_from_uri ( '//Charlie' , ss58_format = substrate . ss58_format ) multisig_account = substrate . generate_multisig_account ( signatories = [ keypair_charlie . ss58_address , '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY' , '5FLSigC9HGRKVhB9FiEo4Y3koPsNmBmLJbpXg2mp1hXcS59Y' ], threshold = 2 ) extrinsic = substrate . create_multisig_extrinsic ( call , keypair_charlie , multisig_account , era = { 'period' : 64 }) receipt = substrate . submit_extrinsic ( extrinsic , wait_for_inclusion = True ) The call will be executed when the second and final multisig extrinsic is submitted, condition and state of the multig will be checked on-chain during processing of the multisig extrinsic. Type decomposition of call params \u00b6 The structure of certain call parameters can be quite complex, then the get_param_info() function of the call function object can provide more insight how to construct those parameters: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 call_function = substrate . get_metadata_call_function ( \"XTokens\" , \"transfer\" ) param_info = call_function . get_param_info () # { # 'currency_id': { # 'Token': ('ACA', 'AUSD', 'DOT', 'LDOT', 'TAP', 'RENBTC', 'CASH', 'KAR', 'KUSD', 'KSM', 'LKSM', 'TAI', 'BNC', 'VSKSM', 'PHA', 'KINT', 'KBTC'), # 'DexShare': ({'Token': ('ACA', 'AUSD', 'DOT', 'LDOT', 'TAP', 'RENBTC', 'CASH', 'KAR', 'KUSD', 'KSM', 'LKSM', 'TAI', 'BNC', 'VSKSM', 'PHA', 'KINT', 'KBTC'), 'Erc20': '[u8; 20]', 'LiquidCrowdloan': 'u32', 'ForeignAsset': 'u16', 'StableAssetPoolToken': 'u32'}, {'Token': ('ACA', 'AUSD', 'DOT', 'LDOT', 'TAP', 'RENBTC', 'CASH', 'KAR', 'KUSD', 'KSM', 'LKSM', 'TAI', 'BNC', 'VSKSM', 'PHA', 'KINT', 'KBTC'), 'Erc20': '[u8; 20]', 'LiquidCrowdloan': 'u32', 'ForeignAsset': 'u16', 'StableAssetPoolToken': 'u32'}), # 'Erc20': '[u8; 20]', # 'StableAssetPoolToken': 'u32', # 'LiquidCrowdloan': 'u32', # 'ForeignAsset': 'u16' # }, # 'amount': 'u128', # 'dest': { # 'V0': {'Null': None, 'X1': {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, 'X2': ({'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X3': ({'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X4': ({'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X5': ({'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X6': ({'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X7': ({'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X8': ({'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}})}, # 'V1': {'parents': 'u8', 'interior': {'Here': None, 'X1': {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, 'X2': ({'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X3': ({'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X4': ({'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X5': ({'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X6': ({'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X7': ({'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X8': ({'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}})}} # }, # 'dest_weight': 'u64' #} Estimate of network fees \u00b6 1 2 payment_info = substrate . get_payment_info ( call = call , keypair = keypair ) # {'class': 'normal', 'partialFee': 2499999066, 'weight': 216625000} Mortal extrinsics \u00b6 By default, immortal extrinsics are created, which means they have an indefinite lifetime for being included in a block. However, it is recommended to use specify an expiry window, so you know after a certain amount of time if the extrinsic is not included in a block, it will be invalidated. 1 extrinsic = substrate . create_signed_extrinsic ( call = call , keypair = keypair , era = { 'period' : 64 }) The period specifies the number of blocks the extrinsic is valid counted from current head.","title":"Creating extrinsics"},{"location":"usage/creating-extrinsics/#creating-extrinsics","text":"In Substrate, transactions are often more broadly referred to as (signed) extrinsics. The term extrinsic is generally used to mean any information that originates outside of the runtime. An extrinsic is basically a vehicle that carries the intention to execute a function call in the runtime, along with proof of the account that wants to execute it. Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 call = substrate . compose_call ( call_module = 'Balances' , call_function = 'transfer' , call_params = { 'dest' : '5E9oDs9PjpsBbxXxRE9uMaZZhnBAV38n2ouLB28oecBDdeQo' , 'value' : 1 * 10 ** 12 } ) extrinsic = substrate . create_signed_extrinsic ( call = call , keypair = keypair ) try : receipt = substrate . submit_extrinsic ( extrinsic , wait_for_inclusion = True ) print ( f \"Extrinsic ' { receipt . extrinsic_hash } ' sent and included in block ' { receipt . block_hash } '\" ) except SubstrateRequestException as e : print ( \"Failed to send: {} \" . format ( e )) The wait_for_inclusion keyword argument used in the example above will block giving the result until it gets confirmation from the node that the extrinsic is succesfully included in a block. The wait_for_finalization keyword will wait until extrinsic is finalized. Note this feature is only available for websocket connections.","title":"Creating extrinsics"},{"location":"usage/creating-extrinsics/#extrinsic-receipts","text":"The substrate.submit_extrinsic() example above returns an ExtrinsicReceipt object, which contains information about the on-chain execution of the extrinsic. Because the block_hash is necessary to retrieve the triggered events from storage, most information is only available when wait_for_inclusion=True or wait_for_finalization=True is used when submitting an extrinsic. Examples: 1 2 3 4 5 receipt = substrate . submit_extrinsic ( extrinsic , wait_for_inclusion = True ) print ( receipt . is_success ) # False print ( receipt . weight ) # 216625000 print ( receipt . total_fee_amount ) # 2749998966 print ( receipt . error_message [ 'name' ]) # 'LiquidityRestrictions' ExtrinsicReceipt objects can also be created for all existing extrinsics on-chain: 1 2 3 4 5 6 7 8 9 10 11 receipt = substrate . retrieve_extrinsic_by_identifier ( \"5233297-1\" ) print ( receipt . is_success ) # False print ( receipt . extrinsic . call_module . name ) # 'Identity' print ( receipt . extrinsic . call . name ) # 'remove_sub' print ( receipt . weight ) # 359262000 print ( receipt . total_fee_amount ) # 2483332406 print ( receipt . error_message [ 'docs' ]) # [' Sender is not a sub-account.'] for event in receipt . triggered_events : print ( f '* { event . value } ' )","title":"Extrinsic Receipts"},{"location":"usage/creating-extrinsics/#multisig-extrinsics","text":"Substrate has the functionality for multi-signature dispatch, allowing multiple signed origins (accounts) to coordinate and dispatch a call, derivable deterministically from the set of account IDs and the threshold number of accounts from the set that must approve it. To initiate and finalize multisig extrinsics, the following helper functions are available: Define the multisig account by supplying its signatories and threshold: 1 2 3 4 5 6 7 8 9 10 keypair_alice = Keypair . create_from_uri ( '//Alice' , ss58_format = substrate . ss58_format ) multisig_account = substrate . generate_multisig_account ( signatories = [ keypair_alice . ss58_address , '5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty' , '5FLSigC9HGRKVhB9FiEo4Y3koPsNmBmLJbpXg2mp1hXcS59Y' ], threshold = 2 ) Then initiate the multisig extrinsic by providing the call and a keypair of one of its signatories: 1 2 3 4 5 6 7 8 9 10 call = substrate . compose_call ( call_module = 'System' , call_function = 'remark_with_event' , call_params = { 'remark' : 'Multisig test' } ) extrinsic = substrate . create_multisig_extrinsic ( call , keypair_alice , multisig_account , era = { 'period' : 64 }) receipt = substrate . submit_extrinsic ( extrinsic , wait_for_inclusion = True ) Then a second signatory approves and finalizes the call by providing the same call to another multisig extrinsic: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Define the multisig account by supplying its signatories and threshold keypair_charlie = Keypair . create_from_uri ( '//Charlie' , ss58_format = substrate . ss58_format ) multisig_account = substrate . generate_multisig_account ( signatories = [ keypair_charlie . ss58_address , '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY' , '5FLSigC9HGRKVhB9FiEo4Y3koPsNmBmLJbpXg2mp1hXcS59Y' ], threshold = 2 ) extrinsic = substrate . create_multisig_extrinsic ( call , keypair_charlie , multisig_account , era = { 'period' : 64 }) receipt = substrate . submit_extrinsic ( extrinsic , wait_for_inclusion = True ) The call will be executed when the second and final multisig extrinsic is submitted, condition and state of the multig will be checked on-chain during processing of the multisig extrinsic.","title":"Multisig extrinsics"},{"location":"usage/creating-extrinsics/#type-decomposition-of-call-params","text":"The structure of certain call parameters can be quite complex, then the get_param_info() function of the call function object can provide more insight how to construct those parameters: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 call_function = substrate . get_metadata_call_function ( \"XTokens\" , \"transfer\" ) param_info = call_function . get_param_info () # { # 'currency_id': { # 'Token': ('ACA', 'AUSD', 'DOT', 'LDOT', 'TAP', 'RENBTC', 'CASH', 'KAR', 'KUSD', 'KSM', 'LKSM', 'TAI', 'BNC', 'VSKSM', 'PHA', 'KINT', 'KBTC'), # 'DexShare': ({'Token': ('ACA', 'AUSD', 'DOT', 'LDOT', 'TAP', 'RENBTC', 'CASH', 'KAR', 'KUSD', 'KSM', 'LKSM', 'TAI', 'BNC', 'VSKSM', 'PHA', 'KINT', 'KBTC'), 'Erc20': '[u8; 20]', 'LiquidCrowdloan': 'u32', 'ForeignAsset': 'u16', 'StableAssetPoolToken': 'u32'}, {'Token': ('ACA', 'AUSD', 'DOT', 'LDOT', 'TAP', 'RENBTC', 'CASH', 'KAR', 'KUSD', 'KSM', 'LKSM', 'TAI', 'BNC', 'VSKSM', 'PHA', 'KINT', 'KBTC'), 'Erc20': '[u8; 20]', 'LiquidCrowdloan': 'u32', 'ForeignAsset': 'u16', 'StableAssetPoolToken': 'u32'}), # 'Erc20': '[u8; 20]', # 'StableAssetPoolToken': 'u32', # 'LiquidCrowdloan': 'u32', # 'ForeignAsset': 'u16' # }, # 'amount': 'u128', # 'dest': { # 'V0': {'Null': None, 'X1': {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, 'X2': ({'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X3': ({'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X4': ({'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X5': ({'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X6': ({'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X7': ({'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X8': ({'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}})}, # 'V1': {'parents': 'u8', 'interior': {'Here': None, 'X1': {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, 'X2': ({'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X3': ({'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X4': ({'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X5': ({'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X6': ({'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X7': ({'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X8': ({'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}})}} # }, # 'dest_weight': 'u64' #}","title":"Type decomposition of call params"},{"location":"usage/creating-extrinsics/#estimate-of-network-fees","text":"1 2 payment_info = substrate . get_payment_info ( call = call , keypair = keypair ) # {'class': 'normal', 'partialFee': 2499999066, 'weight': 216625000}","title":"Estimate of network fees"},{"location":"usage/creating-extrinsics/#mortal-extrinsics","text":"By default, immortal extrinsics are created, which means they have an indefinite lifetime for being included in a block. However, it is recommended to use specify an expiry window, so you know after a certain amount of time if the extrinsic is not included in a block, it will be invalidated. 1 extrinsic = substrate . create_signed_extrinsic ( call = call , keypair = keypair , era = { 'period' : 64 }) The period specifies the number of blocks the extrinsic is valid counted from current head.","title":"Mortal extrinsics"},{"location":"usage/extensions/","text":"Extensions \u00b6 The extension framework is designed to enhance and improve search capabilities of the Substrate node. It allows for the integration of third-party search indices, which can be easily interchanged with other data sources that provide the same functionality, as long as they adhere to standardized naming conventions in the registry. Search extensions \u00b6 At present, the only type of extension that has been implemented is the search extension. While other types of extensions may be developed in the future, the current implementation provides a fallback option that uses only existing Substrate RPC methods. However, it is important to note that this fallback implementation is significantly inefficient, and it is encouraged to utilize third-party search indices where possible for optimal search performance. Available extension calls \u00b6 filter_events Filters events to match provided search criteria e.g. block range, pallet name, accountID in attributes filter_extrinsics Filters extrinsics to match provided search criteria e.g. block range, pallet name, signed by accountID search_block_number Search corresponding block number for provided block_datetime . the prediction tolerance is provided with block_time get_block_timestamp Return a UNIX timestamp for given block_number . SubstrateNodeSearchExtension \u00b6 Initialization \u00b6 1 2 3 substrate = SubstrateInterface ( url = \"ws://127.0.0.1:9944\" ) # Provide maximum block range (bigger range descreases performance) substrate . register_extension ( SubstrateNodeSearchExtension ( max_block_range = 100 )) Implemented extension calls \u00b6 filter_events \u00b6 1 2 # Returns all `Balances.Transfer` events from the last 30 blocks events = substrate . extensions . filter_events ( pallet_name = \"Balances\" , event_name = \"Transfer\" , block_start =- 30 ) filter_extrinsics \u00b6 1 2 # All Timestamp extrinsics in block range #3 until #6 extrinsics = substrate . extensions . filter_extrinsics ( pallet_name = \"Timestamp\" , block_start = 3 , block_end = 6 ) search_block_number \u00b6 1 2 3 4 # Search for block number corresponding a specific datetime block_datetime = datetime ( 2020 , 7 , 12 , 0 , 0 , 0 ) block_number = substrate . extensions . search_block_number ( block_datetime = block_datetime ) Third party extensions \u00b6 PolkascanSearchExtension - Work in progress","title":"Extensions"},{"location":"usage/extensions/#extensions","text":"The extension framework is designed to enhance and improve search capabilities of the Substrate node. It allows for the integration of third-party search indices, which can be easily interchanged with other data sources that provide the same functionality, as long as they adhere to standardized naming conventions in the registry.","title":"Extensions"},{"location":"usage/extensions/#search-extensions","text":"At present, the only type of extension that has been implemented is the search extension. While other types of extensions may be developed in the future, the current implementation provides a fallback option that uses only existing Substrate RPC methods. However, it is important to note that this fallback implementation is significantly inefficient, and it is encouraged to utilize third-party search indices where possible for optimal search performance.","title":"Search extensions"},{"location":"usage/extensions/#available-extension-calls","text":"filter_events Filters events to match provided search criteria e.g. block range, pallet name, accountID in attributes filter_extrinsics Filters extrinsics to match provided search criteria e.g. block range, pallet name, signed by accountID search_block_number Search corresponding block number for provided block_datetime . the prediction tolerance is provided with block_time get_block_timestamp Return a UNIX timestamp for given block_number .","title":"Available extension calls"},{"location":"usage/extensions/#substratenodesearchextension","text":"","title":"SubstrateNodeSearchExtension"},{"location":"usage/extensions/#initialization","text":"1 2 3 substrate = SubstrateInterface ( url = \"ws://127.0.0.1:9944\" ) # Provide maximum block range (bigger range descreases performance) substrate . register_extension ( SubstrateNodeSearchExtension ( max_block_range = 100 ))","title":"Initialization"},{"location":"usage/extensions/#implemented-extension-calls","text":"","title":"Implemented extension calls"},{"location":"usage/extensions/#filter_events","text":"1 2 # Returns all `Balances.Transfer` events from the last 30 blocks events = substrate . extensions . filter_events ( pallet_name = \"Balances\" , event_name = \"Transfer\" , block_start =- 30 )","title":"filter_events"},{"location":"usage/extensions/#filter_extrinsics","text":"1 2 # All Timestamp extrinsics in block range #3 until #6 extrinsics = substrate . extensions . filter_extrinsics ( pallet_name = \"Timestamp\" , block_start = 3 , block_end = 6 )","title":"filter_extrinsics"},{"location":"usage/extensions/#search_block_number","text":"1 2 3 4 # Search for block number corresponding a specific datetime block_datetime = datetime ( 2020 , 7 , 12 , 0 , 0 , 0 ) block_number = substrate . extensions . search_block_number ( block_datetime = block_datetime )","title":"search_block_number"},{"location":"usage/extensions/#third-party-extensions","text":"PolkascanSearchExtension - Work in progress","title":"Third party extensions"},{"location":"usage/ink-contract-interfacing/","text":"ink! contract interfacing \u00b6 ink! is a programming language for smart contracts; blockchains built with the Substrate framework can choose from a number of smart contract languages which one(s) they want to support. ink! is one of them. It is an opinionated language that we have built by extending the popular Rust programming language with functionality needed to make it smart contract compatible. More information about ink! Deploy a contract \u00b6 Tested on substrate-contracts-node with the Flipper contract from the tutorial : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 substrate = SubstrateInterface ( url = \"ws://127.0.0.1:9944\" , type_registry_preset = 'canvas' ) keypair = Keypair . create_from_uri ( '//Alice' ) # Deploy contract code = ContractCode . create_from_contract_files ( metadata_file = os . path . join ( os . path . dirname ( __file__ ), 'assets' , 'flipper.json' ), wasm_file = os . path . join ( os . path . dirname ( __file__ ), 'assets' , 'flipper.wasm' ), substrate = substrate ) contract = code . deploy ( keypair = keypair , endowment = 0 , gas_limit = 1000000000000 , constructor = \"new\" , args = { 'init_value' : True }, upload_code = True ) print ( f '\u2705 Deployed @ { contract . contract_address } ' ) Work with an existing instance: \u00b6 1 2 3 4 5 6 # Create contract instance from deterministic address contract = ContractInstance . create_from_address ( contract_address = contract_address , metadata_file = os . path . join ( os . path . dirname ( __file__ ), 'assets' , 'flipper.json' ), substrate = substrate ) Read data from a contract: \u00b6 1 2 result = contract . read ( keypair , 'get' ) print ( 'Current value of \"get\":' , result . contract_result_data ) Execute a contract call \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # Do a gas estimation of the message gas_predit_result = contract . read ( keypair , 'flip' ) print ( 'Result of dry-run: ' , gas_predit_result . value ) print ( 'Gas estimate: ' , gas_predit_result . gas_required ) # Do the actual call print ( 'Executing contract call...' ) contract_receipt = contract . exec ( keypair , 'flip' , args = { }, gas_limit = gas_predit_result . gas_required ) if contract_receipt . is_success : print ( f 'Events triggered in contract: { contract_receipt . contract_events } ' ) else : print ( f 'Error message: { contract_receipt . error_message } ' ) See complete code example for more details","title":"ink! contract interfacing"},{"location":"usage/ink-contract-interfacing/#ink-contract-interfacing","text":"ink! is a programming language for smart contracts; blockchains built with the Substrate framework can choose from a number of smart contract languages which one(s) they want to support. ink! is one of them. It is an opinionated language that we have built by extending the popular Rust programming language with functionality needed to make it smart contract compatible. More information about ink!","title":"ink! contract interfacing"},{"location":"usage/ink-contract-interfacing/#deploy-a-contract","text":"Tested on substrate-contracts-node with the Flipper contract from the tutorial : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 substrate = SubstrateInterface ( url = \"ws://127.0.0.1:9944\" , type_registry_preset = 'canvas' ) keypair = Keypair . create_from_uri ( '//Alice' ) # Deploy contract code = ContractCode . create_from_contract_files ( metadata_file = os . path . join ( os . path . dirname ( __file__ ), 'assets' , 'flipper.json' ), wasm_file = os . path . join ( os . path . dirname ( __file__ ), 'assets' , 'flipper.wasm' ), substrate = substrate ) contract = code . deploy ( keypair = keypair , endowment = 0 , gas_limit = 1000000000000 , constructor = \"new\" , args = { 'init_value' : True }, upload_code = True ) print ( f '\u2705 Deployed @ { contract . contract_address } ' )","title":"Deploy a contract"},{"location":"usage/ink-contract-interfacing/#work-with-an-existing-instance","text":"1 2 3 4 5 6 # Create contract instance from deterministic address contract = ContractInstance . create_from_address ( contract_address = contract_address , metadata_file = os . path . join ( os . path . dirname ( __file__ ), 'assets' , 'flipper.json' ), substrate = substrate )","title":"Work with an existing instance:"},{"location":"usage/ink-contract-interfacing/#read-data-from-a-contract","text":"1 2 result = contract . read ( keypair , 'get' ) print ( 'Current value of \"get\":' , result . contract_result_data )","title":"Read data from a contract:"},{"location":"usage/ink-contract-interfacing/#execute-a-contract-call","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # Do a gas estimation of the message gas_predit_result = contract . read ( keypair , 'flip' ) print ( 'Result of dry-run: ' , gas_predit_result . value ) print ( 'Gas estimate: ' , gas_predit_result . gas_required ) # Do the actual call print ( 'Executing contract call...' ) contract_receipt = contract . exec ( keypair , 'flip' , args = { }, gas_limit = gas_predit_result . gas_required ) if contract_receipt . is_success : print ( f 'Events triggered in contract: { contract_receipt . contract_events } ' ) else : print ( f 'Error message: { contract_receipt . error_message } ' ) See complete code example for more details","title":"Execute a contract call"},{"location":"usage/keypair-creation-and-signing/","text":"Keypair creation and signing \u00b6 Keypairs are used to sign transactions and encrypt/decrypt messages. They consist of a public/private key and can be generated in several ways like by a BIP39 mnemonic: 1 2 3 4 5 mnemonic = Keypair . generate_mnemonic () keypair = Keypair . create_from_mnemonic ( mnemonic ) signature = keypair . sign ( \"Test123\" ) if keypair . verify ( \"Test123\" , signature ): print ( 'Verified' ) By default, a keypair is using SR25519 cryptography, alternatively ED25519 and ECDSA (for Ethereum-style addresses) can be explicitly specified: 1 2 3 keypair = Keypair . create_from_mnemonic ( mnemonic , crypto_type = KeypairType . ECDSA ) print ( keypair . ss58_address ) # '0x6741864968e8b87c6e32e19cde88A11a3Cc636E9' Creating keypairs with soft and hard key derivation paths \u00b6 1 2 mnemonic = Keypair . generate_mnemonic () keypair = Keypair . create_from_uri ( mnemonic + '//hard/soft' ) By omitting the mnemonic the default development mnemonic is used: 1 keypair = Keypair . create_from_uri ( '//Alice' ) Creating ECDSA keypairs with BIP44 derivation paths \u00b6 1 2 mnemonic = Keypair . generate_mnemonic () keypair = Keypair . create_from_uri ( f \" { mnemonic } /m/44'/60'/0'/0/0\" , crypto_type = KeypairType . ECDSA ) Create Keypair from PolkadotJS JSON format \u00b6 1 2 3 with open ( '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY.json' , 'r' ) as fp : json_data = fp . read () keypair = Keypair . create_from_encrypted_json ( json_data , passphrase = \"test\" , ss58_format = 42 ) Verify generated signature with public address \u00b6 Example: Substrate style addresses 1 2 3 4 5 keypair = Keypair . create_from_uri ( \"//Alice\" , crypto_type = KeypairType . SR25519 ) signature = keypair . sign ( 'test' ) keypair_public = Keypair ( ss58_address = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY' , crypto_type = KeypairType . SR25519 ) result = keypair_public . verify ( 'test' , signature ) Example: Ethereum style addresses 1 2 3 4 5 keypair = Keypair . create_from_uri ( \"/m/44'/60/0'/0\" , crypto_type = KeypairType . ECDSA ) signature = keypair . sign ( 'test' ) keypair_public = Keypair ( public_key = '0x5e20a619338338772e97aa444e001043da96a43b' , crypto_type = KeypairType . ECDSA ) result = keypair_public . verify ( 'test' , signature ) Offline signing of extrinsics \u00b6 This example generates a signature payload which can be signed on another (offline) machine and later on sent to the network with the generated signature. Generate signature payload on online machine: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 substrate = SubstrateInterface ( url = \"ws://127.0.0.1:9944\" , ss58_format = 42 , type_registry_preset = 'substrate-node-template' , ) call = substrate . compose_call ( call_module = 'Balances' , call_function = 'transfer' , call_params = { 'dest' : '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY' , 'value' : 2 * 10 ** 8 } ) era = { 'period' : 64 , 'current' : 22719 } nonce = 0 signature_payload = substrate . generate_signature_payload ( call = call , era = era , nonce = nonce ) Then on another (offline) machine generate the signature with given signature_payload : 1 2 keypair = Keypair . create_from_mnemonic ( \"nature exchange gasp toy result bacon coin broccoli rule oyster believe lyrics\" ) signature = keypair . sign ( signature_payload ) Finally on the online machine send the extrinsic with generated signature: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 keypair = Keypair ( ss58_address = \"5EChUec3ZQhUvY1g52ZbfBVkqjUY9Kcr6mcEvQMbmd38shQL\" ) extrinsic = substrate . create_signed_extrinsic ( call = call , keypair = keypair , era = era , nonce = nonce , signature = signature ) result = substrate . submit_extrinsic ( extrinsic = extrinsic ) print ( result . extrinsic_hash )","title":"Keypair creation and signing"},{"location":"usage/keypair-creation-and-signing/#keypair-creation-and-signing","text":"Keypairs are used to sign transactions and encrypt/decrypt messages. They consist of a public/private key and can be generated in several ways like by a BIP39 mnemonic: 1 2 3 4 5 mnemonic = Keypair . generate_mnemonic () keypair = Keypair . create_from_mnemonic ( mnemonic ) signature = keypair . sign ( \"Test123\" ) if keypair . verify ( \"Test123\" , signature ): print ( 'Verified' ) By default, a keypair is using SR25519 cryptography, alternatively ED25519 and ECDSA (for Ethereum-style addresses) can be explicitly specified: 1 2 3 keypair = Keypair . create_from_mnemonic ( mnemonic , crypto_type = KeypairType . ECDSA ) print ( keypair . ss58_address ) # '0x6741864968e8b87c6e32e19cde88A11a3Cc636E9'","title":"Keypair creation and signing"},{"location":"usage/keypair-creation-and-signing/#creating-keypairs-with-soft-and-hard-key-derivation-paths","text":"1 2 mnemonic = Keypair . generate_mnemonic () keypair = Keypair . create_from_uri ( mnemonic + '//hard/soft' ) By omitting the mnemonic the default development mnemonic is used: 1 keypair = Keypair . create_from_uri ( '//Alice' )","title":"Creating keypairs with soft and hard key derivation paths"},{"location":"usage/keypair-creation-and-signing/#creating-ecdsa-keypairs-with-bip44-derivation-paths","text":"1 2 mnemonic = Keypair . generate_mnemonic () keypair = Keypair . create_from_uri ( f \" { mnemonic } /m/44'/60'/0'/0/0\" , crypto_type = KeypairType . ECDSA )","title":"Creating ECDSA keypairs with BIP44 derivation paths"},{"location":"usage/keypair-creation-and-signing/#create-keypair-from-polkadotjs-json-format","text":"1 2 3 with open ( '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY.json' , 'r' ) as fp : json_data = fp . read () keypair = Keypair . create_from_encrypted_json ( json_data , passphrase = \"test\" , ss58_format = 42 )","title":"Create Keypair from PolkadotJS JSON format"},{"location":"usage/keypair-creation-and-signing/#verify-generated-signature-with-public-address","text":"Example: Substrate style addresses 1 2 3 4 5 keypair = Keypair . create_from_uri ( \"//Alice\" , crypto_type = KeypairType . SR25519 ) signature = keypair . sign ( 'test' ) keypair_public = Keypair ( ss58_address = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY' , crypto_type = KeypairType . SR25519 ) result = keypair_public . verify ( 'test' , signature ) Example: Ethereum style addresses 1 2 3 4 5 keypair = Keypair . create_from_uri ( \"/m/44'/60/0'/0\" , crypto_type = KeypairType . ECDSA ) signature = keypair . sign ( 'test' ) keypair_public = Keypair ( public_key = '0x5e20a619338338772e97aa444e001043da96a43b' , crypto_type = KeypairType . ECDSA ) result = keypair_public . verify ( 'test' , signature )","title":"Verify generated signature with public address"},{"location":"usage/keypair-creation-and-signing/#offline-signing-of-extrinsics","text":"This example generates a signature payload which can be signed on another (offline) machine and later on sent to the network with the generated signature. Generate signature payload on online machine: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 substrate = SubstrateInterface ( url = \"ws://127.0.0.1:9944\" , ss58_format = 42 , type_registry_preset = 'substrate-node-template' , ) call = substrate . compose_call ( call_module = 'Balances' , call_function = 'transfer' , call_params = { 'dest' : '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY' , 'value' : 2 * 10 ** 8 } ) era = { 'period' : 64 , 'current' : 22719 } nonce = 0 signature_payload = substrate . generate_signature_payload ( call = call , era = era , nonce = nonce ) Then on another (offline) machine generate the signature with given signature_payload : 1 2 keypair = Keypair . create_from_mnemonic ( \"nature exchange gasp toy result bacon coin broccoli rule oyster believe lyrics\" ) signature = keypair . sign ( signature_payload ) Finally on the online machine send the extrinsic with generated signature: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 keypair = Keypair ( ss58_address = \"5EChUec3ZQhUvY1g52ZbfBVkqjUY9Kcr6mcEvQMbmd38shQL\" ) extrinsic = substrate . create_signed_extrinsic ( call = call , keypair = keypair , era = era , nonce = nonce , signature = signature ) result = substrate . submit_extrinsic ( extrinsic = extrinsic ) print ( result . extrinsic_hash )","title":"Offline signing of extrinsics"},{"location":"usage/query-storage/","text":"Query storage \u00b6 In Substrate, any pallet can introduce new storage items that will become part of the blockchain state. These storage items can be simple single values, or more complex storage maps. The runtime exposes several storage functions to query those storage items and are provided in the metadata (see substrate.get_metadata_storage_function() ). Example \u00b6 1 2 3 4 result = substrate . query ( 'System' , 'Account' , [ 'F4xQKRUagnSGjFqafyhajLs94e7Vvzvr8ebwYJceKpr8R7T' ]) print ( result . value [ 'nonce' ]) # 7695 print ( result . value [ 'data' ][ 'free' ]) # 635278638077956496 State at a specific block hash \u00b6 1 2 3 4 5 6 7 8 9 account_info = substrate . query ( module = 'System' , storage_function = 'Account' , params = [ 'F4xQKRUagnSGjFqafyhajLs94e7Vvzvr8ebwYJceKpr8R7T' ], block_hash = '0x176e064454388fd78941a0bace38db424e71db9d5d5ed0272ead7003a02234fa' ) print ( account_info [ 'nonce' ] . value ) # 7673 print ( account_info [ 'data' ][ 'free' ] . value ) # 637747267365404068 Type decomposition information \u00b6 Some storage functions need parameters and some of those parameter types can be quite complex to compose. To retrieve more information how to format those storage function parameters, the helper function get_param_info() is available: 1 2 3 4 5 6 7 8 9 10 11 storage_function = substrate . get_metadata_storage_function ( \"Tokens\" , \"TotalIssuance\" ) print ( storage_function . get_param_info ()) # [{ # 'Token': ('ACA', 'AUSD', 'DOT', 'LDOT', 'RENBTC', 'CASH', 'KAR', 'KUSD', 'KSM', 'LKSM', 'TAI', 'BNC', 'VSKSM', 'PHA', 'KINT', 'KBTC'), # 'DexShare': ({'Token': ('ACA', 'AUSD', 'DOT', 'LDOT', 'RENBTC', 'CASH', 'KAR', 'KUSD', 'KSM', 'LKSM', 'TAI', 'BNC', 'VSKSM', 'PHA', 'KINT', 'KBTC'), 'Erc20': '[u8; 20]', 'LiquidCrowdloan': 'u32', 'ForeignAsset': 'u16'}, {'Token': ('ACA', 'AUSD', 'DOT', 'LDOT', 'RENBTC', 'CASH', 'KAR', 'KUSD', 'KSM', 'LKSM', 'TAI', 'BNC', 'VSKSM', 'PHA', 'KINT', 'KBTC'), 'Erc20': '[u8; 20]', 'LiquidCrowdloan': 'u32', 'ForeignAsset': 'u16'}), # 'Erc20': '[u8; 20]', # 'StableAssetPoolToken': 'u32', # 'LiquidCrowdloan': 'u32', # 'ForeignAsset': 'u16' # }] Query a mapped storage function \u00b6 Mapped storage functions can be iterated over all key/value pairs, for these type of storage functions query_map() can be used. The result is a QueryMapResult object, which is an iterator: 1 2 3 4 5 # Retrieve the first 199 System.Account entries result = substrate . query_map ( 'System' , 'Account' , max_results = 199 ) for account , account_info in result : print ( f \"Free balance of account ' { account . value } ': { account_info . value [ 'data' ][ 'free' ] } \" ) These results are transparently retrieved in batches capped by the page_size kwarg, currently the maximum page_size restricted by the RPC node is 1000 1 2 3 4 5 # Retrieve all System.Account entries in batches of 200 (automatically appended by `QueryMapResult` iterator) result = substrate . query_map ( 'System' , 'Account' , page_size = 200 , max_results = 400 ) for account , account_info in result : print ( f \"Free balance of account ' { account . value } ': { account_info . value [ 'data' ][ 'free' ] } \" ) Querying a DoubleMap storage function: 1 2 3 4 5 era_stakers = substrate . query_map ( module = 'Staking' , storage_function = 'ErasStakers' , params = [ 2100 ] )","title":"Query storage"},{"location":"usage/query-storage/#query-storage","text":"In Substrate, any pallet can introduce new storage items that will become part of the blockchain state. These storage items can be simple single values, or more complex storage maps. The runtime exposes several storage functions to query those storage items and are provided in the metadata (see substrate.get_metadata_storage_function() ).","title":"Query storage"},{"location":"usage/query-storage/#example","text":"1 2 3 4 result = substrate . query ( 'System' , 'Account' , [ 'F4xQKRUagnSGjFqafyhajLs94e7Vvzvr8ebwYJceKpr8R7T' ]) print ( result . value [ 'nonce' ]) # 7695 print ( result . value [ 'data' ][ 'free' ]) # 635278638077956496","title":"Example"},{"location":"usage/query-storage/#state-at-a-specific-block-hash","text":"1 2 3 4 5 6 7 8 9 account_info = substrate . query ( module = 'System' , storage_function = 'Account' , params = [ 'F4xQKRUagnSGjFqafyhajLs94e7Vvzvr8ebwYJceKpr8R7T' ], block_hash = '0x176e064454388fd78941a0bace38db424e71db9d5d5ed0272ead7003a02234fa' ) print ( account_info [ 'nonce' ] . value ) # 7673 print ( account_info [ 'data' ][ 'free' ] . value ) # 637747267365404068","title":"State at a specific block hash"},{"location":"usage/query-storage/#type-decomposition-information","text":"Some storage functions need parameters and some of those parameter types can be quite complex to compose. To retrieve more information how to format those storage function parameters, the helper function get_param_info() is available: 1 2 3 4 5 6 7 8 9 10 11 storage_function = substrate . get_metadata_storage_function ( \"Tokens\" , \"TotalIssuance\" ) print ( storage_function . get_param_info ()) # [{ # 'Token': ('ACA', 'AUSD', 'DOT', 'LDOT', 'RENBTC', 'CASH', 'KAR', 'KUSD', 'KSM', 'LKSM', 'TAI', 'BNC', 'VSKSM', 'PHA', 'KINT', 'KBTC'), # 'DexShare': ({'Token': ('ACA', 'AUSD', 'DOT', 'LDOT', 'RENBTC', 'CASH', 'KAR', 'KUSD', 'KSM', 'LKSM', 'TAI', 'BNC', 'VSKSM', 'PHA', 'KINT', 'KBTC'), 'Erc20': '[u8; 20]', 'LiquidCrowdloan': 'u32', 'ForeignAsset': 'u16'}, {'Token': ('ACA', 'AUSD', 'DOT', 'LDOT', 'RENBTC', 'CASH', 'KAR', 'KUSD', 'KSM', 'LKSM', 'TAI', 'BNC', 'VSKSM', 'PHA', 'KINT', 'KBTC'), 'Erc20': '[u8; 20]', 'LiquidCrowdloan': 'u32', 'ForeignAsset': 'u16'}), # 'Erc20': '[u8; 20]', # 'StableAssetPoolToken': 'u32', # 'LiquidCrowdloan': 'u32', # 'ForeignAsset': 'u16' # }]","title":"Type decomposition information"},{"location":"usage/query-storage/#query-a-mapped-storage-function","text":"Mapped storage functions can be iterated over all key/value pairs, for these type of storage functions query_map() can be used. The result is a QueryMapResult object, which is an iterator: 1 2 3 4 5 # Retrieve the first 199 System.Account entries result = substrate . query_map ( 'System' , 'Account' , max_results = 199 ) for account , account_info in result : print ( f \"Free balance of account ' { account . value } ': { account_info . value [ 'data' ][ 'free' ] } \" ) These results are transparently retrieved in batches capped by the page_size kwarg, currently the maximum page_size restricted by the RPC node is 1000 1 2 3 4 5 # Retrieve all System.Account entries in batches of 200 (automatically appended by `QueryMapResult` iterator) result = substrate . query_map ( 'System' , 'Account' , page_size = 200 , max_results = 400 ) for account , account_info in result : print ( f \"Free balance of account ' { account . value } ': { account_info . value [ 'data' ][ 'free' ] } \" ) Querying a DoubleMap storage function: 1 2 3 4 5 era_stakers = substrate . query_map ( module = 'Staking' , storage_function = 'ErasStakers' , params = [ 2100 ] )","title":"Query a mapped storage function"},{"location":"usage/subscriptions/","text":"Subscriptions \u00b6 It is possible to create subscriptions for certain data to get updates pushed as they happen. These subscriptions are blocking until the subscription is closed. Storage subscriptions \u00b6 When a callable is passed as kwarg subscription_handler in the query() function, there will be a subscription created for given storage query. Updates will be pushed to the callable and will block execution until a final value is returned. This value will be returned as a result of the query and finally automatically unsubscribed from further updates. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 def subscription_handler ( account_info_obj , update_nr , subscription_id ): if update_nr == 0 : print ( 'Initial account data:' , account_info_obj . value ) if update_nr > 0 : # Do something with the update print ( 'Account data changed:' , account_info_obj . value ) # The execution will block until an arbitrary value is returned, which will be the result of the `query` if update_nr > 5 : return account_info_obj result = substrate . query ( \"System\" , \"Account\" , [ \"5GNJqTPyNqANBkUVMN1LPPrxXnFouWXoe2wNSmmEoLctxiZY\" ], subscription_handler = subscription_handler ) print ( result ) Subscribe to multiple storage keys \u00b6 To subscribe to multiple storage keys at once, the function subscribe_storage() provides the most efficient method. This will track changes for multiple state entries (storage keys) in just one RPC call to the Substrate node. Same as for query() , updates will be pushed to the subscription_handler callable and will block execution until a final value is returned. This value will be returned as a result of subscription and finally automatically unsubscribed from further updates. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 def subscription_handler ( storage_key , updated_obj , update_nr , subscription_id ): print ( f \"Update for { storage_key . params [ 0 ] } : { updated_obj . value } \" ) # Accounts to track storage_keys = [ substrate . create_storage_key ( \"System\" , \"Account\" , [ \"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\" ] ), substrate . create_storage_key ( \"System\" , \"Account\" , [ \"5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty\" ] ) ] result = substrate . subscribe_storage ( storage_keys = storage_keys , subscription_handler = subscription_handler ) Subscribe to new block headers \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 def subscription_handler ( obj , update_nr , subscription_id ): print ( f \"New block # { obj [ 'header' ][ 'number' ] } \" ) block = substrate . get_block ( block_number = obj [ 'header' ][ 'number' ]) for idx , extrinsic in enumerate ( block [ 'extrinsics' ]): print ( f '# { idx } : { extrinsic . value } ' ) if update_nr > 10 : return { 'message' : 'Subscription will cancel when a value is returned' , 'updates_processed' : update_nr } result = substrate . subscribe_block_headers ( subscription_handler )","title":"Subscriptions"},{"location":"usage/subscriptions/#subscriptions","text":"It is possible to create subscriptions for certain data to get updates pushed as they happen. These subscriptions are blocking until the subscription is closed.","title":"Subscriptions"},{"location":"usage/subscriptions/#storage-subscriptions","text":"When a callable is passed as kwarg subscription_handler in the query() function, there will be a subscription created for given storage query. Updates will be pushed to the callable and will block execution until a final value is returned. This value will be returned as a result of the query and finally automatically unsubscribed from further updates. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 def subscription_handler ( account_info_obj , update_nr , subscription_id ): if update_nr == 0 : print ( 'Initial account data:' , account_info_obj . value ) if update_nr > 0 : # Do something with the update print ( 'Account data changed:' , account_info_obj . value ) # The execution will block until an arbitrary value is returned, which will be the result of the `query` if update_nr > 5 : return account_info_obj result = substrate . query ( \"System\" , \"Account\" , [ \"5GNJqTPyNqANBkUVMN1LPPrxXnFouWXoe2wNSmmEoLctxiZY\" ], subscription_handler = subscription_handler ) print ( result )","title":"Storage subscriptions"},{"location":"usage/subscriptions/#subscribe-to-multiple-storage-keys","text":"To subscribe to multiple storage keys at once, the function subscribe_storage() provides the most efficient method. This will track changes for multiple state entries (storage keys) in just one RPC call to the Substrate node. Same as for query() , updates will be pushed to the subscription_handler callable and will block execution until a final value is returned. This value will be returned as a result of subscription and finally automatically unsubscribed from further updates. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 def subscription_handler ( storage_key , updated_obj , update_nr , subscription_id ): print ( f \"Update for { storage_key . params [ 0 ] } : { updated_obj . value } \" ) # Accounts to track storage_keys = [ substrate . create_storage_key ( \"System\" , \"Account\" , [ \"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\" ] ), substrate . create_storage_key ( \"System\" , \"Account\" , [ \"5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty\" ] ) ] result = substrate . subscribe_storage ( storage_keys = storage_keys , subscription_handler = subscription_handler )","title":"Subscribe to multiple storage keys"},{"location":"usage/subscriptions/#subscribe-to-new-block-headers","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 def subscription_handler ( obj , update_nr , subscription_id ): print ( f \"New block # { obj [ 'header' ][ 'number' ] } \" ) block = substrate . get_block ( block_number = obj [ 'header' ][ 'number' ]) for idx , extrinsic in enumerate ( block [ 'extrinsics' ]): print ( f '# { idx } : { extrinsic . value } ' ) if update_nr > 10 : return { 'message' : 'Subscription will cancel when a value is returned' , 'updates_processed' : update_nr } result = substrate . subscribe_block_headers ( subscription_handler )","title":"Subscribe to new block headers"},{"location":"usage/using-scaletype-objects/","text":"Using ScaleType objects \u00b6 The result of the previous storage query example is a ScaleType object, more specific a Struct . The nested object structure of this account_info object is as follows: 1 account_info = <AccountInfo(value={'nonce': <U32(value=5)>, 'consumers': <U32(value=0)>, 'providers': <U32(value=1)>, 'sufficients': <U32(value=0)>, 'data': <AccountData(value={'free': 1152921503981846391, 'reserved': 0, 'misc_frozen': 0, 'fee_frozen': 0})>})> Every ScaleType have the following characteristics: Shorthand lookup of nested types \u00b6 Inside the AccountInfo struct there are several U32 objects that represents for example a nonce or the amount of provider, also another struct object AccountData which contains more nested types. To access these nested structures you can access those formally using: account_info.value_object['data'].value_object['free'] As a convenient shorthand you can also use: account_info['data']['free'] ScaleType objects can also be automatically converted to an iterable, so if the object is for example the others in the result Struct of Staking.eraStakers can be iterated via: 1 2 for other_info in era_stakers [ 'others' ]: print ( other_info [ 'who' ], other_info [ 'value' ]) Serializable \u00b6 Each ScaleType holds a complete serialized version of itself in the account_info.serialize() property, so it can easily store or used to create JSON strings. So the whole result of account_info.serialize() will be a dict containing the following: 1 2 3 4 5 6 7 8 9 10 11 12 { \"nonce\" : 5 , \"consumers\" : 0 , \"providers\" : 1 , \"sufficients\" : 0 , \"data\" : { \"free\" : 1152921503981846391 , \"reserved\" : 0 , \"misc_frozen\" : 0 , \"fee_frozen\" : 0 } } Comparing values with ScaleType objects \u00b6 It is possible to compare ScaleType objects directly to Python primitives, internally the serialized value attribute is compared: 1 2 metadata_obj [ 1 ][ 1 ][ 'extrinsic' ][ 'version' ] # '<U8(value=4)>' metadata_obj [ 1 ][ 1 ][ 'extrinsic' ][ 'version' ] == 4 # True","title":"Using ScaleType objects"},{"location":"usage/using-scaletype-objects/#using-scaletype-objects","text":"The result of the previous storage query example is a ScaleType object, more specific a Struct . The nested object structure of this account_info object is as follows: 1 account_info = <AccountInfo(value={'nonce': <U32(value=5)>, 'consumers': <U32(value=0)>, 'providers': <U32(value=1)>, 'sufficients': <U32(value=0)>, 'data': <AccountData(value={'free': 1152921503981846391, 'reserved': 0, 'misc_frozen': 0, 'fee_frozen': 0})>})> Every ScaleType have the following characteristics:","title":"Using ScaleType objects"},{"location":"usage/using-scaletype-objects/#shorthand-lookup-of-nested-types","text":"Inside the AccountInfo struct there are several U32 objects that represents for example a nonce or the amount of provider, also another struct object AccountData which contains more nested types. To access these nested structures you can access those formally using: account_info.value_object['data'].value_object['free'] As a convenient shorthand you can also use: account_info['data']['free'] ScaleType objects can also be automatically converted to an iterable, so if the object is for example the others in the result Struct of Staking.eraStakers can be iterated via: 1 2 for other_info in era_stakers [ 'others' ]: print ( other_info [ 'who' ], other_info [ 'value' ])","title":"Shorthand lookup of nested types"},{"location":"usage/using-scaletype-objects/#serializable","text":"Each ScaleType holds a complete serialized version of itself in the account_info.serialize() property, so it can easily store or used to create JSON strings. So the whole result of account_info.serialize() will be a dict containing the following: 1 2 3 4 5 6 7 8 9 10 11 12 { \"nonce\" : 5 , \"consumers\" : 0 , \"providers\" : 1 , \"sufficients\" : 0 , \"data\" : { \"free\" : 1152921503981846391 , \"reserved\" : 0 , \"misc_frozen\" : 0 , \"fee_frozen\" : 0 } }","title":"Serializable"},{"location":"usage/using-scaletype-objects/#comparing-values-with-scaletype-objects","text":"It is possible to compare ScaleType objects directly to Python primitives, internally the serialized value attribute is compared: 1 2 metadata_obj [ 1 ][ 1 ][ 'extrinsic' ][ 'version' ] # '<U8(value=4)>' metadata_obj [ 1 ][ 1 ][ 'extrinsic' ][ 'version' ] == 4 # True","title":"Comparing values with ScaleType objects"}]}